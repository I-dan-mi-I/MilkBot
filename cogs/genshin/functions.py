# for discord
import nextcord
from nextcord.utils import get
import asyncio
from nextcord.ext import commands, tasks
from settings import settings

# for logs
import asyncio
from time import time
from datetime import datetime

# for database
import database.genshin as genshin
from database.db_classes import getGenshinClass
import genshinstats as gs

uri = settings["StatUri"]


submit = [
    "‚úÖ",
    "‚ùå",
]

# for card
from card.genshin import *
import unicodedata

# for multipage embed
from nextcord_paginator import paginator as Paginator

# for cards
from settings import banners  # name of cards
from settings import colors  # name of colors from Pillow

gs.set_cookie(ltuid=settings["ltuid"], ltoken=settings["ltoken"])


def massive_split(mas):
    masx = []
    l10 = len(mas) // 10
    for i in range(l10 + 1):
        masx.append(mas[i * 10 : (i + 1) * 10])
    return masx


class Genshins(commands.Cog, name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Genshin Impact"):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –≤ Genshin Impact"""

    COG_EMOJI = "üéÆ"

    def __init__(self, bot):
        self.bot = bot
        self.update.start()

    @tasks.loop(seconds=3600)
    async def update(self):

        for guild in self.bot.guilds:

            Genshin = getGenshinClass(guild.id)

            try:
                x = self.bot.databaseSession.query(Genshin).all()
            except:
                x = []

            for xe in x:
                try:
                    member = await guild.fetch_member(xe.uid)
                except:
                    member = None
                    pass

                if member is not None:
                    card = gs.get_record_card(int(xe.mihoyouid))

                    try:
                        xe.ar = card["level"]
                    except:
                        xe.ar = None
                        pass

                    if xe.ar is not None:
                        xe.genshinname = card["nickname"]
                        xe.discordname = member.display_name
                        xe.genshinuid = card["game_role_id"]

                self.bot.databaseSession.commit()

    @commands.command(pass_context=True, brief="–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º UID –∏ AR")
    @commands.guild_only()
    async def –∏–≥—Ä–æ–∫–∏(self, ctx):

        user = []

        # if not connected to database

        Genshin = getGenshinClass(ctx.guild.id)

        x = self.bot.databaseSession.query(Genshin).all()

        for xe in x:
            if xe.genshinuid is not None:
                user.append(xe)

        if user == []:
            await ctx.send("–ù–∏–∫—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª —Å–≤–æ–π UID.")
            return
        user = massive_split(user)
        embs = []

        c = 0
        for u in user:
            emb = nextcord.Embed(title=f"–ò–≥—Ä–æ–∫–∏ Genshin Impact | {ctx.guild.name}")
            emb.color = nextcord.Colour.green()
            emb.set_thumbnail(url=ctx.guild.icon.url)

            for idx, items in enumerate(u):
                emb.add_field(
                    name=f"{c*10+idx+1}. {items.discordname} | {items.genshinname}",
                    value=f"UID: {items.genshinuid} | AR: {items.ar}",
                    inline=False,
                )

            embs.append(emb)
            c += 1

        try:
            await ctx.message.delete()
            pass
        except nextcord.errors.Forbidden:
            pass

        message = await ctx.send(embed=embs[0], delete_after=300)

        page = Paginator(
            message,
            embs,
            ctx.author,
            self.bot,
            footerpage=True,
            footerdatetime=False,
            footerboticon=True,
        )
        try:
            await page.start()
        except nextcord.errors.NotFound:
            pass

    @commands.command(pass_context=True, brief="–í–∏—Ç—Ä–∏–Ω–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏")
    @commands.guild_only()
    async def –≤–∏—Ç—Ä–∏–Ω–∞(self, ctx, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=None):

        usr = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # check user input
        if usr is None:
            user = ctx.author
        else:
            if not usr.startswith("<"):
                try:
                    user = await ctx.guild.fetch_member(usr)
                except:
                    return await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
            else:
                try:
                    user = ctx.message.mentions[0]
                    pass
                except:
                    return await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")

        # if not connected to database

        x = genshin.getInfo(self.bot.databaseSession, ctx.guild.id, user.id)

        if x is not None:
            card = gs.get_record_card(x.mihoyouid)
            try:
                ar = card["level"]
                pass
            except:
                await ctx.send(
                    f"{user.mention}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏/–∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ genshin –∞–∫–∫–∞—É–Ω—Ç"
                )

            uid = card["game_role_id"]
            data = gs.get_user_stats(int(uid), lang="ru-ru")
            characters = data["characters"]

            cardx = board(characters)
            cardx.avatar = user.avatar.url
            cardx.uid = uid
            cardx.ar = ar
            cardx.genshinname = f"{card['nickname']} UID: {uid}"

            cardx.color = x.color_stat
            cardx.namecolor = x.color_name
            cardx.statcolor = x.color_titles
            cardx.path = x.background

        else:
            await ctx.send("–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ UID –Ω–µ—Ç –≤ –±–∞–∑–µ!")
            return False

        # sending image to discord channel
        await ctx.send(file=await cardx.create())
        await ctx.send(f"UID: {uid}")

    @commands.command(pass_context=True, brief="–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞")
    @commands.guild_only()
    async def –≥–µ–Ω—à–∏–Ω_—Ä–∞–Ω–≥(self, ctx, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=None):

        usr = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # check user input
        if usr is None:
            user = ctx.author
        else:
            if not usr.startswith("<"):
                try:
                    user = await ctx.guild.fetch_member(usr)
                except:
                    return await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
            else:
                try:
                    user = ctx.message.mentions[0]
                    pass
                except:
                    return await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")

        # if not connected to database

        x = genshin.getInfo(self.bot.databaseSession, ctx.guild.id, user.id)

        if x is not None:
            card1 = rank()

            card1.avatar = user.avatar.url

            card1.name = unicodedata.normalize("NFKC", str(user.display_name))

            card1.color = x.color_stat
            card1.namecolor = x.color_name
            card1.statcolor = x.color_titles

            card1.path = x.background
            card = gs.get_record_card(int(x.mihoyouid))

            try:
                card1.ar = card["level"]
                pass
            except:
                await ctx.send(
                    f"{ctx.author.mention}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏/–∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ genshin –∞–∫–∫–∞—É–Ω—Ç"
                )

            uid = card["game_role_id"]
            card1.genshinname = f"{card['nickname']} UID: {uid}"

            data = gs.get_user_stats(int(uid), lang="ru-ru")

            stats = data["stats"]
            for field, value in stats.items():
                exec(f"card1.{field} = '{value}'")
        else:
            await ctx.send("–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ UID –Ω–µ—Ç –≤ –±–∞–∑–µ!")
            return False

        # sending image to discord channel
        await ctx.send(file=await card1.create())
        await ctx.send(f"UID: {uid}")

    @commands.command(pass_context=True, brief="–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤–∏—Ç—Ä–∏–Ω—ã")
    @commands.guild_only()
    async def –≥–µ–Ω—à–∏–Ω_—Ü–≤–µ—Ç(self, ctx, *—Ü–≤–µ—Ç–∞):

        args = —Ü–≤–µ—Ç–∞
        # if user input blank > send colors magazine
        if args == ():
            embs = []

            for i in range(1, 5):
                emb = nextcord.Embed(title=f"–í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–≤–µ—Ç–æ–≤")
                emb.color = nextcord.Colour.random()
                emb.set_image(
                    url=f"https://raw.githubusercontent.com/I-dan-mi-I/images/main/color/{i}.png"
                )
                embs.append(emb)

            try:
                await ctx.message.delete()
                pass
            except nextcord.errors.Forbidden:
                pass

            message = await ctx.send(embed=embs[0], delete_after=60)

            page = Paginator(
                message,
                embs,
                ctx.author,
                self.bot,
                footerpage=True,
                footerdatetime=False,
                footerboticon=True,
            )
            try:
                await page.start()
            except nextcord.errors.NotFound:
                pass

        else:
            if len(args) < 3:
                await ctx.send(
                    f"{ctx.author.mention}, —É–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Ü–≤–µ—Ç —á–∏—Å–µ–ª –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ> <—Ü–≤–µ—Ç –∏–º–µ–Ω–∏> <—Ü–≤–µ—Ç –ø—É–Ω–∫—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏>"
                )
            else:
                for e in args:
                    if e not in colors:
                        await ctx.send(
                            f"{ctx.author.mention} —Ç–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞({e}) –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
                        )
                        return

                # if not connected to database
                if connected != True:
                    await asyncio.sleep(1)

                if genshin.setColor(
                    self.bot.databaseSession, ctx.guild.id, ctx.author.id, args
                ):
                    await ctx.send(f"{ctx.author.mention} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")
                else:
                    await ctx.send(
                        f"{ctx.author.mention} –≤–∞—à–µ–≥–æ UID –Ω–µ—Ç –≤ –±–∞–∑–µ! –¥–æ–±–∞–≤–∏—Ç—å UID"
                    )

    @commands.command(pass_context=True, brief="–í—ã–±–æ—Ä —Ñ–æ–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤–∏—Ç—Ä–∏–Ω—ã")
    @commands.guild_only()
    async def –≥–µ–Ω—à–∏–Ω_—Ñ–æ–Ω(self, ctx, *—Ñ–æ–Ω):
        global SpreadSheet
        global service

        args = —Ñ–æ–Ω

        # if user input blank > send colors magazine
        if args == ():

            embs = []

            for i in range(1, 15):
                emb = nextcord.Embed(title=f"–í–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ–Ω–æ–≤")
                emb.color = nextcord.Colour.random()
                emb.set_image(
                    url=f"https://raw.githubusercontent.com/I-dan-mi-I/images/main/list/{i}.png"
                )
                embs.append(emb)

            try:
                await ctx.message.delete()
                pass
            except nextcord.errors.Forbidden:
                pass

            message = await ctx.send(embed=embs[0], delete_after=60)

            page = Paginator(
                message,
                embs,
                ctx.author,
                self.bot,
                footerpage=True,
                footerdatetime=False,
                footerboticon=True,
            )
            try:
                await page.start()
            except nextcord.errors.NotFound:
                pass

        else:
            e = (" ").join(args).lower()
            if e in banners:
                e = f"https://raw.githubusercontent.com/I-dan-mi-I/images/main/banners/{e}.png"

                # if not connected to database
                if connected != True:
                    await asyncio.sleep(1)

                if genshin.setBackground(
                    self.bot.databaseSession, ctx.guild.id, ctx.author.id, e
                ):
                    await ctx.send(f"{ctx.author.mention} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")
                else:
                    await ctx.send(
                        f"{ctx.author.mention} –≤–∞—à–µ–≥–æ UID –Ω–µ—Ç –≤ –±–∞–∑–µ! –¥–æ–±–∞–≤–∏—Ç—å UID"
                    )
            else:
                await ctx.send(
                    f"{ctx.author.mention} —Ç–∞–∫–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
                )

    @commands.command(
        pass_context=True, brief="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π HoYoLab ID –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞"
    )
    @commands.guild_only()
    async def –≥–µ–Ω—à–∏–Ω_–¥–æ–±–∞–≤–∏—Ç—å(self, ctx, *, hoyolab_id=None):

        hoyolab_id
        if hoyolab_id is None:
            m1 = await ctx.send(f"{ctx.author.mention}, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à HoYoLab ID.")
            try:
                msg = await self.bot.wait_for(
                    "message",
                    timeout=60.0,
                    check=lambda m: m.channel == ctx.channel
                    and m.author.id == ctx.author.id,
                )
                e = msg.content
            except asyncio.TimeoutError:
                await m1.delete()
                return
        else:
            e = hoyolab_id

        # if not connected to database

        try:
            card = gs.get_record_card(int(e))
            pass
        except:
            await ctx.send(f"{ctx.author.mention}, –≤–∞—à HoYoLab ID –Ω–µ–≤–µ—Ä–µ–Ω.")

        try:
            ar = card["level"]
            pass
        except:
            await ctx.send(
                f"{ctx.author.mention}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏/–∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ genshin –∞–∫–∫–∞—É–Ω—Ç"
            )

        uid = card["game_role_id"]
        nickname = card["nickname"]

        emb = nextcord.Embed(
            title=f"{ctx.author.display_name}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )
        emb.add_field(name="–ù–∏–∫", value=nickname)

        emb.add_field(name="–†–∞–Ω–≥ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π", value=ar)

        emb.add_field(name="UID", value=uid, inline=False)

        emb.color = nextcord.Colour.blue()

        view = nextcord.ui.View()
        buttons = {}
        for reaction in submit:
            button = nextcord.ui.Button(
                style=nextcord.ButtonStyle.secondary, emoji=reaction
            )
            buttons[button.custom_id] = reaction
            view.add_item(button)

        msg = await ctx.send(embed=emb, view=view)

        try:
            interaction = await self.bot.wait_for(
                "interaction",
                timeout=60.0,
                check=lambda m: m.user.id == ctx.author.id and m.message.id == msg.id
                # and str(m.emoji) in submit,
            )
        except asyncio.TimeoutError:
            emb.set_footer(text="–í—Ä–µ–º—è –≤—ã—à–ª–æ")
            emb.color = nextcord.Colour.red()
            return await msg.edit(embed=emb)

        if buttons[interaction.data["custom_id"]] == "‚úÖ":

            genshin.addInfo(
                self.bot.databaseSession,
                ctx.guild.id,
                ctx.author.id,
                int(e),
                uid,
                nickname,
                ctx.author.display_name,
                ar,
            )
            emb.title = "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
            emb.color = nextcord.Colour.brand_green()
            await msg.edit(embed=emb, view=None)
        else:
            emb.title = "–û—Ç–º–µ–Ω–µ–Ω–æ"
            emb.color = nextcord.Colour.red()
            await msg.edit(embed=emb, view=None)


def setup(bot):
    bot.add_cog(Genshins(bot))
