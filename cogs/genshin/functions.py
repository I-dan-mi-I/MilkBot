import datetime

import nextcord
from nextcord.ext import commands
from nextcord.ext.commands import Context
import asyncio
import genshinstats as gs
from nextcord_paginator.nextcord_paginator import Paginator
from typing import Union
from dataclasses import dataclass
from utils import list_split

submit = [
    "‚úÖ",
    "‚ùå",
]


@dataclass
class GenshinMember:
    name: str
    nick: str
    ar: int
    uid: int


class Genshin(commands.Cog, name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Genshin Impact"):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –≤ Genshin Impact"""

    COG_EMOJI: str = "üéÆ"

    def __init__(self, bot):
        self.bot = bot

    @commands.command(brief="–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º UID –∏ AR")
    @commands.guild_only()
    async def –∏–≥—Ä–æ–∫–∏(self, ctx: Context):

        users = []

        players = self.bot.database.get_genshin_players(ctx.guild.id)

        for player in players:
            try:
                member = ctx.guild.get_member(player.id)
                hoyolab_profile = gs.get_record_card(player.hoyolab_id)

                users.append(
                    GenshinMember(
                        name=member.display_name,
                        nick=hoyolab_profile["nickname"],
                        ar=int(hoyolab_profile["level"]),
                        uid=hoyolab_profile["game_role_id"],
                    )
                )
            except:
                continue

        if not users:
            return await ctx.send("–ù–∏–∫—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª —Å–≤–æ–π UID.")

        users.sort(key=lambda m: m.ar, reverse=True)
        users = list_split(users)
        embs = []

        for page, user in enumerate(users):
            emb = nextcord.Embed(
                title=f"–ò–≥—Ä–æ–∫–∏ Genshin Impact | {ctx.guild.name}",
                colour=nextcord.Colour.green(),
            )
            emb.set_thumbnail(url=ctx.guild.icon.url)

            for idx, items in enumerate(user):
                emb.add_field(
                    name=f"{page*10+idx+1}. {items.name} | {items.nick}",
                    value=f"UID: {items.uid} | AR: {items.ar}",
                    inline=False,
                )
            if emb.fields:
                embs.append(emb)

        message = await ctx.send(embed=embs[0], delete_after=300)

        page = Paginator(
            message,
            embs,
            ctx.author,
            self.bot,
            footerpage=True,
            footerdatetime=True,
            footerboticon=True,
            timeout=0,
        )
        try:
            await page.start()
        except nextcord.errors.NotFound:
            pass

    @commands.command(
        brief="–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞", aliases=["–≥–µ–Ω—à–∏–Ω_—Ä–∞–Ω–≥", "–≤–∏—Ç—Ä–∏–Ω–∞"]
    )
    @commands.guild_only()
    async def –≥–µ–Ω—à–∏–Ω_–∞–∫–∫–∞—É–Ω—Ç(
        self, ctx: Context, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Union[str, nextcord.Member] = ""
    ):

        if isinstance(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, nextcord.Member):
            user = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        elif –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å == "":
            user = ctx.author
        else:
            try:
                user = ctx.guild.get_member(int(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å))
            except:
                user = ctx.author

        player = self.bot.database.get_genshin_profile(user.id, ctx.guild.id)

        if player is not None:
            card = gs.get_record_card(player.hoyolab_id)

            try:
                ar = card["level"]
            except:
                return await ctx.send(
                    f"{ctx.author.mention}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏/–∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ genshin –∞–∫–∫–∞—É–Ω—Ç"
                )

            uid = card["game_role_id"]
            nick = card["nickname"]
            data = gs.get_user_stats(int(uid), lang="ru-ru")

            embed = nextcord.Embed(
                description=f"–ù–∏–∫: {nick}\n–†–∞–Ω–≥ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π: {ar}\nUID: {uid}",
                timestamp=datetime.datetime.now(),
                colour=nextcord.Colour.random(),
            )

            if ctx.author.avatar:
                embed.set_author(
                    name=ctx.author.display_name, icon_url=ctx.author.avatar.url
                )
            else:
                embed.set_author(
                    name=ctx.author.display_name,
                    icon_url=f"https://cdn.discordapp.com/embed/avatars/{str(int(ctx.author.discriminator) % 5)}.png",
                )

            stats = data["stats"]
            n = "\n"
            embed.add_field(
                name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                value=f"""**–î–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** {stats['active_days']}
**–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** {stats['achievements']}
**–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:** {stats['characters']}
**–¢–æ—á–∫–∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏:** {stats['unlocked_waypoints']}
**–ê–Ω–µ–º–æ–∫—É–ª—ã:** {stats['anemoculi']}
**–ì–µ–æ–∫—É–ª—ã:** {stats['geoculi']}
**–≠–ª–µ–∫—Ç—Ä–æ–∫—É–ª—ã:** {stats['electroculi']}
**–ü–æ–¥–∑–µ–º–µ–ª—å—è:** {stats['unlocked_domains']}
**–ü—Ä–æ–≥—Ä–µ—Å—Å –í–∏—Ç–æ–π –ë–µ–∑–¥–Ω—ã:** {stats['spiral_abyss']}
**–†–æ—Å–∫–æ—à–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏:** {stats['luxurious_chests']}
**–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏**: {stats['precious_chests']}
**–ë–æ–≥–∞—Ç—ã–µ —Å—É–Ω–¥—É–∫–∏:** {stats['exquisite_chests']}
**–û–±—ã—á–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏:** {stats['common_chests']}""",
                # inline=False
            )

            characters = data["characters"]
            embed.add_field(
                name="–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
                value=f"""{n.join(f"üí† **{character['name']}** | {character['rarity']} ‚≠ê{n}**–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:** {character['level']} | **–£—Ä–æ–≤–µ–Ω—å –¥—Ä—É–∂–±—ã:** {character['friendship']}" for character in characters)}""",
            )

            teapot = data["teapot"]
            embed.add_field(
                name="–ß–∞–π–Ω–∏–∫ –±–µ–∑–º—è—Ç–µ–∂–Ω–æ—Å—Ç–∏",
                value=f"""**–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è:** {teapot['level']}
**–°–∏–ª–∞ –ê–¥–µ–ø—Ç–æ–≤:** {teapot['comfort']} ({teapot['comfort_name']})
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:** {teapot['items']}
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:** {teapot['visitors']}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–∏—Ç–µ–ª–∏:**
{n.join(f"üí† {realm['name']}" for realm in teapot['realms'])}""",
            )

            explorations = data["explorations"]
            explorations_checked = []
            for region in explorations:
                if region["name"] != "":
                    explorations_checked.append(region)
            embed.add_field(
                name="–ü—Ä–æ–≥—Ä–µ—Å—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                value=f"""{n.join(f'''üí† **{region['name']}** - {region['explored']}%{f"{n}**–£—Ä–æ–≤–µ–Ω—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:** {region['level']}" if region['type'] == 'Reputation' else ''}{f"{n}{n.join('**' + offer['name'] + '** - ' + str(offer['level']) + ' —É—Ä–æ–≤–µ–Ω—å' for offer in region['offerings'])}" if region['offerings'] else ''}''' for region in explorations_checked)}""",
            )

            return await ctx.send(embed=embed)
        else:
            return await ctx.send("–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ UID –Ω–µ—Ç –≤ –±–∞–∑–µ!")

    @commands.command(brief="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π HoYoLab ID –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞")
    @commands.guild_only()
    async def –≥–µ–Ω—à–∏–Ω_–¥–æ–±–∞–≤–∏—Ç—å(self, ctx: Context, *, hoyolab_id: str = ""):

        if hoyolab_id is None:
            m1 = await ctx.send(f"{ctx.author.mention}, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à HoYoLab ID.")
            try:
                msg = await self.bot.wait_for(
                    "message",
                    timeout=60.0,
                    check=lambda m: m.channel == ctx.channel
                    and m.author.id == ctx.author.id,
                )
                e = msg.content
            except asyncio.TimeoutError:
                await m1.delete()
                return
        else:
            e = hoyolab_id

        try:
            card = gs.get_record_card(int(e))
        except:
            return await ctx.send(f"{ctx.author.mention}, –≤–∞—à HoYoLab ID –Ω–µ–≤–µ—Ä–µ–Ω.")

        try:
            ar = card["level"]
        except:
            return await ctx.send(
                f"{ctx.author.mention}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏/–∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ genshin –∞–∫–∫–∞—É–Ω—Ç"
            )

        uid = card["game_role_id"]
        nickname = card["nickname"]

        emb = nextcord.Embed(
            title=f"{ctx.author.display_name}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            colour=nextcord.Colour.blue(),
        )
        emb.add_field(name="–ù–∏–∫", value=nickname)

        emb.add_field(name="–†–∞–Ω–≥ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π", value=ar)

        emb.add_field(name="UID", value=uid, inline=False)

        view = nextcord.ui.View()
        buttons = {}
        for reaction in submit:
            button = nextcord.ui.Button(
                style=nextcord.ButtonStyle.secondary, emoji=reaction
            )
            buttons[button.custom_id] = reaction
            view.add_item(button)

        msg = await ctx.send(embed=emb, view=view)

        try:
            interaction = await self.bot.wait_for(
                "interaction",
                timeout=60.0,
                check=lambda m: m.user.id == ctx.author.id and m.message.id == msg.id
                # and str(m.emoji) in submit,
            )
        except asyncio.TimeoutError:
            emb.set_footer(text="–í—Ä–µ–º—è –≤—ã—à–ª–æ")
            emb.colour = nextcord.Colour.red()
            return await msg.edit(embed=emb)

        if buttons[interaction.data["custom_id"]] == "‚úÖ":

            self.bot.database.add_genshin_profile(
                id=ctx.author.id,
                guild_id=ctx.guild.id,
                hoyolab_id=int(hoyolab_id),
                genshin_id=int(uid),
            )
            emb.title = "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
            emb.colour = nextcord.Colour.brand_green()
            await msg.edit(embed=emb, view=None)
        else:
            emb.title = "–û—Ç–º–µ–Ω–µ–Ω–æ"
            emb.colour = nextcord.Colour.red()
            await msg.edit(embed=emb, view=None)


def setup(bot):
    bot.add_cog(Genshin(bot))
    gs.set_cookie(ltuid=bot.settings["ltuid"], ltoken=bot.settings["ltoken"])
