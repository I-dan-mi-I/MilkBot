from datetime import datetime
from typing import Optional

import modules.database as database
import nextcord
from base.base_cog import MilkCog
from nextcord.utils import get

from .ui import GIFandImageSetuper, ReactionRolesSetup, VerifyReactionRolesSetup


class Setup(MilkCog, name="–£—Å—Ç–∞–Ω–æ–≤–∫–∞"):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""

    COG_EMOJI: str = "üîß"

    def __init__(self, bot):
        self.bot = bot
        self.required_permission = "admin"

    @MilkCog.slash_command()
    async def config(self, interaction):
        ...

    @config.subcommand()
    async def mailing(self, interaction: nextcord.Interaction):
        pass

    @mailing.subcommand(
        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"
    )
    async def activate(
        self,
        interaction: nextcord.Interaction,
        type: str = nextcord.SlashOption(
            name="—Ç–∏–ø",
            description="—Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏",
            choices={
                "a–Ω–∏–º–µ –≥–æ—Ä–æ—Å–∫–æ–ø": "–∞–Ω–∏–º–µ–≥–æ—Ä–æ—Å–∫–æ–ø",
                "–Ω–æ–≤–æ—Å—Ç–∏ —à–∏–∫–∏–º–æ—Ä–∏": "—à–∏–∫–∏–Ω–æ–≤–æ—Å—Ç–∏",
                "—Ä–µ–ª–∏–∑—ã —à–∏–∫–∏–º–æ—Ä–∏": "—à–∏–∫–∏—Ä–µ–ª–∏–∑—ã",
            },
            required=True,
        ),
        channel: Optional[nextcord.TextChannel] = nextcord.SlashOption(
            name="–∫–∞–Ω–∞–ª",
            description="–∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å)",
            required=False,
        ),
    ):
        await interaction.response.defer()
        match type:
            case "–∞–Ω–∏–º–µ–≥–æ—Ä–æ—Å–∫–æ–ø":
                if isinstance(channel, nextcord.TextChannel):
                    self.bot.database.set_horo(
                        interaction.guild.id, True, channels=[channel.id]
                    )
                    await interaction.followup.send(
                        f"–ê–Ω–∏–º–µ –≥–æ—Ä–æ—Å–∫–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è channel–∞ {channel.name}."
                    )
                else:
                    status: bool = self.bot.database.get_guild_info(
                        interaction.guild.id
                    ).horo
                    if not status:
                        return await interaction.followup.send(
                            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–Ω–∏–º–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ id channel–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞"
                        )
                    else:
                        self.bot.database.set_horo(interaction.guild.id, False)
                        return await interaction.followup.send(
                            "–ê–Ω–∏–º–µ –≥–æ—Ä–æ—Å–∫–æ–ø –æ—Ç–∫–ª—é—á–µ–Ω."
                        )
            case "—à–∏–∫–∏–Ω–æ–≤–æ—Å—Ç–∏":
                if isinstance(channel, nextcord.TextChannel):
                    self.bot.database.set_shikimori_news(
                        interaction.guild.id, True, channels=[channel.id]
                    )
                    await interaction.followup.send(
                        f"–ù–æ–≤–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è channel–∞ {channel.name}"
                    )
                else:
                    status: bool = self.bot.database.get_guild_info(
                        interaction.guild.id
                    ).shikimori_news
                    if not status:
                        return await interaction.followup.send(
                            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å Shikimori, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ id channel–∞"
                        )
                    else:
                        self.bot.database.set_shikimori_news(
                            interaction.guild.id, False
                        )
                        return await interaction.followup.send("–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
            case "—à–∏–∫–∏—Ä–µ–ª–∏–∑—ã":
                if isinstance(channel, nextcord.TextChannel):
                    self.bot.database.set_shikimori_releases(
                        interaction.guild.id, True, channels=[channel.id]
                    )
                    await interaction.followup.send(
                        f"–†–µ–ª–∏–∑—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è channel–∞ {channel.name}"
                    )
                else:
                    status: bool = self.bot.database.get_guild_info(
                        interaction.guild.id
                    ).shikimori_news
                    if not status:
                        return await interaction.followup.send(
                            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–æ–≤ —Å Shikimori, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ id channel–∞"
                        )
                    else:
                        self.bot.database.set_shikimori_releases(
                            interaction.guild.id, False
                        )
                        return await interaction.followup.send("–†–µ–ª–∏–∑—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

    @mailing.subcommand(
        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–∏ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ"
    )
    async def role(
        self,
        interaction: nextcord.Interaction,
        type: str = nextcord.SlashOption(
            name="type",
            description="—Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏",
            choices={
                "a–Ω–∏–º–µ –≥–æ—Ä–æ—Å–∫–æ–ø": "–∞–Ω–∏–º–µ–≥–æ—Ä–æ—Å–∫–æ–ø",
                "–Ω–æ–≤–æ—Å—Ç–∏ —à–∏–∫–∏–º–æ—Ä–∏": "—à–∏–∫–∏–Ω–æ–≤–æ—Å—Ç–∏",
                "—Ä–µ–ª–∏–∑—ã —à–∏–∫–∏–º–æ—Ä–∏": "—à–∏–∫–∏—Ä–µ–ª–∏–∑—ã",
            },
            required=True,
        ),
        role: Optional[nextcord.Role] = nextcord.SlashOption(
            name="—Ä–æ–ª—å",
            description="—É–ø–æ–º–∏–Ω–∞–µ–º–∞—è —Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å)",
            required=False,
        ),
    ):
        await interaction.response.defer()
        match type:
            case "–∞–Ω–∏–º–µ–≥–æ—Ä–æ—Å–∫–æ–ø":
                if isinstance(role, nextcord.Role):
                    guild_info = self.bot.database.get_guild_info(interaction.guild.id)
                    self.bot.database.set_horo(
                        interaction.guild.id,
                        True,
                        roles=[role.id],
                        channels=guild_info.horo_channels,
                    )
                    return await interaction.followup.send(
                        f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏ {role.name}."
                    )
                else:
                    return await interaction.followup.send(
                        "–î–ª—è —É–∫–∞–∑–∞–Ω–∏—è —É–ø–æ–º—è–Ω–∞–µ–º–æ–π —Ä–æ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ id —Ä–æ–ª–∏."
                    )
            case "—à–∏–∫–∏–Ω–æ–≤–æ—Å—Ç–∏":
                if isinstance(role, nextcord.Role):
                    guild_info = self.bot.database.get_guild_info(interaction.guild.id)
                    self.bot.database.set_shikimori_news(
                        interaction.guild.id,
                        True,
                        roles=[role.id],
                        channels=guild_info.shikimori_news_channels,
                    )
                    return await interaction.followup.send(
                        f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏ {role.name}."
                    )
                else:
                    return await interaction.followup.send(
                        "–î–ª—è —É–∫–∞–∑–∞–Ω–∏—è —É–ø–æ–º—è–Ω–∞–µ–º–æ–π —Ä–æ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ id —Ä–æ–ª–∏."
                    )
            case "—à–∏–∫–∏—Ä–µ–ª–∏–∑—ã":
                if isinstance(role, nextcord.Role):
                    guild_info = self.bot.database.get_guild_info(interaction.guild.id)
                    self.bot.database.set_shikimori_releases(
                        interaction.guild.id,
                        True,
                        roles=[role.id],
                        channels=guild_info.shikimori_releases_channels,
                    )
                    return await interaction.followup.send(
                        f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏ {role.name}."
                    )
                else:
                    return await interaction.followup.send(
                        "–î–ª—è —É–∫–∞–∑–∞–Ω–∏—è —É–ø–æ–º—è–Ω–∞–µ–º–æ–π —Ä–æ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ id —Ä–æ–ª–∏."
                    )

    @config.subcommand(description="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥")
    async def prefix(
        self,
        interaction: nextcord.Interaction,
        prefix: Optional[str] = nextcord.SlashOption(
            name="–ø—Ä–µ—Ñ–∏–∫—Å",
            description="–ø—Ä–µ—Ñ–∏–∫—Å —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
            min_length=1,
            required=True,
        ),
    ):

        await interaction.response.defer()

        self.bot.database.set_guild_prefix(interaction.guild.id, prefix)
        self.bot.prefixes[interaction.guild.id] = prefix
        return await interaction.followup.send(f"–ü—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {prefix}.")

    @config.subcommand(
        description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
    )
    async def voice_channels(
        self,
        interaction: nextcord.Interaction,
        channel: Optional[nextcord.VoiceChannel] = nextcord.SlashOption(
            name="–∫–∞–Ω–∞–ª",
            description='–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª-"–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            required=True,
        ),
    ):

        await interaction.response.defer()

        if channel.category is None:
            return await interaction.followup.send("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")

        if isinstance(channel, nextcord.VoiceChannel):
            self.bot.database.set_voice_channels(
                interaction.guild.id,
                {"category": channel.category.id, "generator": channel.id},
            )
            return await interaction.followup.send("–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            return await interaction.followup.send("–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")

    @config.subcommand()
    async def stuff(self, interaction: nextcord.Interaction):
        pass

    @stuff.subcommand(description="–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª")
    async def add(
        self,
        interaction: nextcord.Interaction,
        type: str = nextcord.SlashOption(
            name="—Ç–∏–ø",
            description="—Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
            choices={
                "a–¥–º–∏–Ω": "–∞–¥–º–∏–Ω",
                "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä": "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                "—Ä–µ–¥–∞–∫—Ç–æ—Ä": "—Ä–µ–¥–∞–∫—Ç–æ—Ä",
            },
            required=True,
        ),
        roles: str = nextcord.SlashOption(
            name="—Ä–æ–ª–∏",
            description="—É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–µ–π, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
            required=True,
        ),
    ):

        await interaction.response.defer(ephemeral=True)

        roles = roles.replace(" ", "").replace("<@&", "").replace(">", "").split(",")
        roles_id = list(map(int, roles))

        match type:
            case "–∞–¥–º–∏–Ω":
                self.bot.database.add_stuff_roles(
                    interaction.guild.id, admin_roles=roles_id
                )
            case "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä":
                self.bot.database.add_stuff_roles(
                    interaction.guild.id, moderator_roles=roles_id
                )
            case "—Ä–µ–¥–∞–∫—Ç–æ—Ä":
                self.bot.database.add_stuff_roles(
                    interaction.guild.id, editor_roles=roles_id
                )

        await interaction.followup.send("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", ephemeral=True)

    @stuff.subcommand(description="–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª")
    async def remove(
        self,
        interaction: nextcord.Interaction,
        type: str = nextcord.SlashOption(
            name="—Ç–∏–ø",
            description="—Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
            choices={
                "a–¥–º–∏–Ω": "–∞–¥–º–∏–Ω",
                "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä": "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                "—Ä–µ–¥–∞–∫—Ç–æ—Ä": "—Ä–µ–¥–∞–∫—Ç–æ—Ä",
            },
            required=True,
        ),
        roles: str = nextcord.SlashOption(
            name="—Ä–æ–ª–∏",
            description="—É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–µ–π, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
            required=True,
        ),
    ):

        await interaction.response.defer(ephemeral=True)

        roles = roles.replace(" ", "").replace("<@&", "").replace(">", "").split(",")
        roles_id = list(map(int, roles))

        match type:
            case "–∞–¥–º–∏–Ω":
                self.bot.database.remove_stuff_roles(
                    interaction.guild.id, admin_roles=roles_id
                )
            case "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä":
                self.bot.database.remove_stuff_roles(
                    interaction.guild.id, moderator_roles=roles_id
                )
            case "—Ä–µ–¥–∞–∫—Ç–æ—Ä":
                self.bot.database.remove_stuff_roles(
                    interaction.guild.id, editor_roles=roles_id
                )

        await interaction.followup.send("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", ephemeral=True)

    @config.subcommand(description="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    async def current(self, interaction: nextcord.Interaction):

        await interaction.response.defer(ephemeral=True)

        guild: database.GuildsSetiings = self.bot.database.get_guild_info(
            interaction.guild.id
        )

        embed = nextcord.Embed(
            title=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ | {interaction.guild.name}",
            description=f"–ë–æ—Ç: **{self.bot.user.name}**\n" + f"–ü—Ä–µ—Ñ–∏–∫—Å: {guild.prefix}",
            colour=nextcord.Colour.random(),
            timestamp=datetime.now(),
        )

        if interaction.user.avatar:
            embed.set_author(
                name=interaction.user.display_name, icon_url=interaction.user.avatar.url
            )
        else:
            embed.set_author(
                name=interaction.user.display_name,
                icon_url=f"https://cdn.discordapp.com/embed/avatars/{str(int(interaction.user.discriminator) % 5)}.png",
            )

        if interaction.guild.icon:
            embed.set_thumbnail(url=interaction.guild.icon.url)

        if guild.admin_roles or guild.moderator_roles or guild.editor_roles:
            embed.add_field(
                name="–†–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
                value=(
                    (
                        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: "
                        + ", ".join(
                            [
                                interaction.guild.get_role(role_id).mention
                                for role_id in guild.admin_roles
                                if interaction.guild.get_role(role_id) is not None
                            ]
                        )
                        + "\n"
                        if guild.admin_roles
                        else ""
                    )
                    + (
                        "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:  "
                        + ", ".join(
                            [
                                interaction.guild.get_role(role_id).mention
                                for role_id in guild.moderator_roles
                                if interaction.guild.get_role(role_id) is not None
                            ]
                        )
                        + "\n"
                        if guild.moderator_roles
                        else ""
                    )
                    + (
                        f"–†–µ–¥–∞–∫—Ç–æ—Ä—ã: "
                        ", ".join(
                            [
                                interaction.guild.get_role(role_id).mention
                                for role_id in guild.editor_roles
                                if interaction.guild.get_role(role_id) is not None
                            ]
                        )
                        + "\n"
                        if guild.editor_roles
                        else ""
                    )
                ),
                inline=False,
            )
        else:
            embed.add_field(
                name="\u200b", value="**–†–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã**", inline=False
            )

        if guild.voice_channel_category != 0 and guild.voice_channel_generator != 0:
            embed.add_field(
                name="–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã",
                value=(
                    (
                        "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: "
                        + interaction.guild.get_channel(
                            guild.voice_channel_generator
                        ).mention
                        if interaction.guild.get_channel(guild.voice_channel_generator)
                        is not None
                        else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
                    )
                    + "\n"
                    + (
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: "
                        + get(
                            interaction.guild.categories,
                            id=guild.voice_channel_category,
                        ).mention
                        if get(
                            interaction.guild.categories,
                            id=guild.voice_channel_category,
                        )
                        is not None
                        else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                    )
                ),
                inline=False,
            )
        else:
            embed.add_field(
                name="\u200b",
                value=f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!",
                inline=False,
            )

        if guild.horo:
            embed.add_field(
                name="–ê–Ω–∏–º–µ –ì–æ—Ä–æ—Å–∫–æ–ø",
                value=(
                    (
                        "–†–æ–ª–∏: "
                        + ", ".join(
                            [
                                interaction.guild.get_role(role_id).mention
                                for role_id in guild.horo_roles
                                if interaction.guild.get_role(role_id) is not None
                            ]
                        )
                        + "\n"
                        if guild.horo_roles
                        else ""
                    )
                    + (
                        f"–ö–∞–Ω–∞–ª—ã: "
                        + ", ".join(
                            [
                                interaction.guild.get_channel(channel_id).mention
                                for channel_id in guild.horo_channels
                                if interaction.guild.get_channel(channel_id) is not None
                            ]
                        )
                        + "\n"
                        if guild.horo_channels
                        else ""
                    )
                ),
                inline=False,
            )
        else:
            embed.add_field(
                name="\u200b", value="**–ê–Ω–∏–º–µ –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**", inline=False
            )

        if guild.shikimori_news:
            embed.add_field(
                name="–ù–æ–≤–æ—Å—Ç–∏ Shikimori",
                value=(
                    (
                        "–†–æ–ª–∏: "
                        + ", ".join(
                            [
                                interaction.guild.get_role(role_id).mention
                                for role_id in guild.shikimori_news_roles
                                if interaction.guild.get_role(role_id) is not None
                            ]
                        )
                        + "\n"
                        if guild.shikimori_news_roles
                        else ""
                    )
                    + (
                        f"–ö–∞–Ω–∞–ª—ã: "
                        + ", ".join(
                            [
                                interaction.guild.get_channel(channel_id).mention
                                for channel_id in guild.shikimori_news_channels
                                if interaction.guild.get_channel(channel_id) is not None
                            ]
                        )
                        + "\n"
                        if guild.shikimori_news_channels
                        else ""
                    )
                ),
                inline=False,
            )
        else:
            embed.add_field(
                name="\u200b",
                value="**–ù–æ–≤–æ—Å—Ç–∏ Shikimori –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!**",
                inline=False,
            )

        if guild.shikimori_releases:
            embed.add_field(
                name="–†–µ–ª–∏–∑—ã Shikimori",
                value=(
                    (
                        "–†–æ–ª–∏: "
                        + ", ".join(
                            [
                                interaction.guild.get_role(role_id).mention
                                for role_id in guild.shikimori_releases_roles
                                if interaction.guild.get_role(role_id) is not None
                            ]
                        )
                        + "\n"
                        if guild.shikimori_releases_roles
                        else ""
                    )
                    + (
                        f"–ö–∞–Ω–∞–ª—ã: "
                        + ", ".join(
                            [
                                interaction.guild.get_channel(channel_id).mention
                                for channel_id in guild.shikimori_releases_channels
                                if interaction.guild.get_channel(channel_id) is not None
                            ]
                        )
                        + "\n"
                        if guild.shikimori_releases_channels
                        else ""
                    )
                ),
                inline=False,
            )
        else:
            embed.add_field(
                name="\u200b",
                value="**–†–µ–ª–∏–∑—ã Shikimori –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!**",
                inline=False,
            )

        await interaction.followup.send(embed=embed, ephemeral=True)

    @config.subcommand()
    async def restore_roles(
        self,
        interaction: nextcord.Interaction,
    ):
        ...

    @restore_roles.subcommand(
        name="disable",
        description="–í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–æ–ª–µ–π –¥–ª—è –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    )
    async def restore_roles_disable(
        self,
        interaction: nextcord.Interaction,
    ):
        await interaction.response.defer(ephemeral=True)
        db_info = self.bot.database.get_guild_info(interaction.guild.id)
        db_info.restore_roles = False
        await interaction.followup.send("–í–æ–∑–≤—Ä–∞—Ç —Ä–æ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω!")
        self.bot.database.session.commit()

    @restore_roles.subcommand(
        name="enable",
        description="–í–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–æ–ª–µ–π –¥–ª—è –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    )
    async def restore_roles_enable(
        self,
        interaction: nextcord.Interaction,
        need_verify: bool = nextcord.SlashOption(
            name="–Ω–µ–æ–±—Ö–æ–¥–∏–º–∞_–≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏—è",
            description="–ù–µ–æ–±—Ö–æ–¥–º–∞ –ª–∏ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ MilkBot, –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Ä–æ–ª–µ–π",
        ),
    ):
        await interaction.response.defer(ephemeral=True)
        db_info = self.bot.database.get_guild_info(interaction.guild.id)
        db_info.restore_roles = True
        if need_verify and not db_info.verify:
            await interaction.followup.send(
                "–í–æ–∑–≤—Ä–∞—Ç —Ä–æ–ª–µ–π –ø–æ—Å–ª–µ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω. "
                + "**–í–ù–ò–ú–ê–ù–ò–ï:** –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —á–µ—Ä–µ–∑ MilkBot"
            )
        elif need_verify:
            await interaction.followup.send("–í–æ–∑–≤—Ä–∞—Ç —Ä–æ–ª–µ–π –ø–æ—Å–ª–µ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω.")
        else:
            await interaction.followup.send("–í–æ–∑–≤—Ä–∞—Ç —Ä–æ–ª–µ–π –≤–∫–ª—é—á–µ–Ω.")
        self.bot.database.session.commit()

    @config.subcommand()
    async def reaction_roles(self, interaction: nextcord.Interaction):
        ...

    @reaction_roles.subcommand(
        name="create", description="–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º"
    )
    async def reaction_roles_create(
        self,
        interaction: nextcord.Interaction,
        channel: nextcord.TextChannel = nextcord.SlashOption(
            name="–∫–∞–Ω–∞–ª",
            description="–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–±–æ—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å Reaction Roles",
            required=True,
        ),
        new_embed: bool = nextcord.SlashOption(
            name="–Ω–æ–≤–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ",
            description="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            choices={
                "–î–∞": True,
                "–ù–µ—Ç": False,
            },
            required=True,
        ),
        id: str = nextcord.SlashOption(
            name="id",
            description="ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Reaction Roles",
            required=False,
        ),
    ):
        if not new_embed:
            await interaction.response.defer(ephemeral=True)
            try:
                message = await channel.fetch_message(int(id))
            except:
                await interaction.followup.send(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {id}")
                return
            if message is None:
                await interaction.followup.send(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {id}")
                return
        else:
            message = None

        view = ReactionRolesSetup(interaction.user, self.bot, channel, message)
        control_message = await interaction.send(view=view)
        content_message = (
            f"**–¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å:** {'–î–∞' if view.unique else '–ù–µ—Ç'}\n"
            + f"**–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {'–î–∞' if view.single_use else '–ù–µ—Ç'}"
            + ("\n\n" + view.message_text if view.message_text != "" else "")
        )
        preview_message = await interaction.followup.send(
            content=content_message, embed=view.embed
        )
        view.control_message = control_message
        view.preview_message = preview_message
        view.original_channel = interaction.channel
        await view.wait()

    @reaction_roles.subcommand(
        name="edit",
        description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º",
    )
    async def reaction_roles_edit(
        self,
        interaction: nextcord.Interaction,
        channel: nextcord.TextChannel = nextcord.SlashOption(
            name="–∫–∞–Ω–∞–ª",
            description="–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ",
            required=True,
        ),
        edit_existing: bool = nextcord.SlashOption(
            name="—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏–µ",
            description="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è)",
            choices={
                "–î–∞": True,
                "–ù–µ—Ç": False,
            },
            required=True,
        ),
        id: str = nextcord.SlashOption(
            name="id",
            description="ID-—Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è Reaction Roles",
            required=True,
        ),
    ):
        await interaction.response.defer(ephemeral=True)
        try:
            message = await channel.fetch_message(int(id))
        except:
            await interaction.followup.send(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {id}")
            return
        if message is None:
            await interaction.followup.send(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {id}")
            return

        db_info = self.bot.database.get_reaction_roles_info(message.id, channel.id)
        if db_info is None:
            await interaction.followup.send(
                "–í –ë–î –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
            )
            return

        if interaction.user.id != db_info.author_id:
            await interaction.followup.send(f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞")
            return

        if edit_existing and message.author != self.bot.user:
            await interaction.followup.send(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —Å–æ–æ–æ–±—â–µ–Ω–∏—è")
            return

        view = ReactionRolesSetup(
            interaction.user, self.bot, channel, message, db_info, edit_existing
        )
        control_message = await interaction.followup.send(view=view)
        content_message = (
            f"**–¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å:** {'–î–∞' if view.unique else '–ù–µ—Ç'}\n"
            + f"**–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {'–î–∞' if view.single_use else '–ù–µ—Ç'}"
            + ("\n\n" + view.message_text if view.message_text != "" else "")
        )
        preview_message = await interaction.followup.send(
            content=content_message, embed=view.embed
        )
        for emoji in view.reaction_and_roles:
            await preview_message.add_reaction(emoji)
        view.control_message = control_message
        view.preview_message = preview_message
        view.original_channel = interaction.channel
        await view.wait()

    @reaction_roles.subcommand(
        name="delete", description="–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º"
    )
    async def reaction_roles_delete(
        self,
        interaction: nextcord.Interaction,
        channel: nextcord.TextChannel = nextcord.SlashOption(
            name="–∫–∞–Ω–∞–ª",
            description="–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ",
            required=True,
        ),
        id: str = nextcord.SlashOption(
            name="id",
            description="ID-—Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è Reaction Roles",
            required=True,
        ),
    ):
        await interaction.response.defer(ephemeral=True)
        try:
            message = await channel.fetch_message(int(id))
        except:
            await interaction.followup.send(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {id}")
            return
        if message is None:
            await interaction.followup.send(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {id}")
            return

        db_info = self.bot.database.get_reaction_roles_info(message.id, channel.id)
        if db_info is None:
            await interaction.followup.send(
                "–í –ë–î –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
            )
            return

        if interaction.user.id != db_info.author_id:
            await interaction.followup.send(f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞")
            return
        if not db_info.sended_message:
            await message.clear_reactions()
        else:
            await message.delete()
        self.bot.database.delete_reaction_roles_info(message.id, channel.id)
        await interaction.followup.send("ReactionRoles —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")

    @MilkCog.slash_command(
        description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≥–∏—Ñ–æ–∫ –¥–ª—è RP —Å–æ–æ–±—â–µ–Ω–∏–π",
        permission="moderator",
    )
    async def rp_gif_setup(
        self,
        interaction: nextcord.Interaction,
        type: str = nextcord.SlashOption(
            name="–¥–µ–π—Å—Ç–≤–∏–µ",
            description="–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
            choices={
                "–æ–±—å—è—Ç–∏–µ": "hug",
                "—É–ª—ã–±–∫–∞": "smile",
                "—Ç—ã–∫": "poke",
                "–ø–æ—â—ë—á–∏–Ω–∞": "slap",
                "—É–∫—É—Å": "bite",
                "—Ä—ã–¥–∞–Ω–∏–µ": "cry",
                "–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ": "blush",
                "–ø–æ—Ü–µ–ª—É–π": "kiss",
                "–æ–±–ª–∏–∑—ã–≤–∞–Ω–∏–µ": "lick",
                "–ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ": "pat",
                "–∫–æ—Ä–º–ª–µ–Ω–∏–µ": "feed",
            },
            required=True,
        ),
    ):
        info = self.bot.database.get_guild_rp_custom_gif(interaction.guild.id)
        gif = []
        exec(f"gif.extend(info.{type})")

        view = GIFandImageSetuper(interaction.user, self.bot, gif, type)
        control_message = await interaction.send(view=view)
        preview_message = await interaction.followup.send(embed=view.embed)
        view.control_message = control_message
        view.preview_message = preview_message
        await view.wait()

        info = self.bot.database.get_guild_rp_custom_gif(interaction.guild.id)
        exec(f"info.{type} = view.gif_list")
        self.bot.database.session.commit()
        await interaction.followup.send("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    @config.subcommand()
    async def verify(self, interaction):
        ...

    @verify.subcommand(
        name="classic_setup", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ MilkBot"
    )
    async def verify_setup(
        self,
        interaction: nextcord.Interaction,
        activate: bool = nextcord.SlashOption(
            name="–≤–∫–ª—é—á–µ–Ω–∞", description="–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        ),
        roles: str = nextcord.SlashOption(
            name="—Ä–æ–ª–∏",
            description="–ù–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–µ–π –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            required=False,
        ),
    ):
        await interaction.response.defer(ephemeral=True)
        guild_info = self.bot.database.get_guild_info(interaction.guild.id)
        if activate:
            roles = (
                roles.replace(" ", "").replace("<@&", "").replace(">", "").split(",")
            )
            roles_id = list(map(int, roles))

            valid_roles = [
                interaction.guild.get_role(role_id)
                for role_id in roles_id
                if interaction.guild.get_role(role_id) is not None
            ]

            guild_info.verify = True
            guild_info.verify_roles = [role.id for role in valid_roles]

            await interaction.followup.send(
                "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –†–æ–ª–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: "
                + ", ".join([role.mention for role in valid_roles])
            )
        else:
            guild_info.verify = False
            await interaction.followup.send("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        await self.bot.database.session.commit()

    @verify.subcommand(
        name="reaction_roles_setup",
        description="–°–æ–∑–¥–∞–Ω–∏–µ ReactionRoles —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
    )
    async def verify_reaction_roles_create(
        self,
        interaction: nextcord.Interaction,
        channel: nextcord.TextChannel = nextcord.SlashOption(
            name="–∫–∞–Ω–∞–ª",
            description="–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–±–æ—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å Reaction Roles",
            required=True,
        ),
    ):
        view = VerifyReactionRolesSetup(interaction.user, self.bot, channel)
        control_message = await interaction.send(view=view)
        preview_message = await interaction.followup.send(
            content=view.message_text, embed=view.embed
        )
        view.control_message = control_message
        view.preview_message = preview_message
        view.original_channel = interaction.channel
        await view.wait()

    @verify.subcommand(name="notify", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    async def verify_notify(
        self,
        interaction: nextcord.Interaction,
        activate: bool = nextcord.SlashOption(
            name="–≤–∫–ª—é—á–µ–Ω–∞", description="–°–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        ),
        channel: nextcord.TextChannel = nextcord.SlashOption(
            name="–∫–∞–Ω–∞–ª_–¥–ª—è_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", description="–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        ),
        phrases: str = nextcord.SlashOption(
            name="—Ä–æ–ª–∏",
            description="–ù–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É-–∑–∞–ø—è—Ç—É—é —Ñ—Ä–∞–∑—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            required=False,
        ),
    ):
        await interaction.response.defer(ephemeral=True)
        guild_info = self.bot.database.get_guild_info(interaction.guild.id)
        if not activate:
            guild_info.verify_notify = False
            await interaction.followup.send(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            phrases = phrases.split(";")
            guild_info.verify_notify = True
            guild_info.verify_notify_channel = channel.id
            guild_info.verify_notify_phrases = phrases
            await interaction.followup.send(
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ {channel.mention}"
            )
        await self.bot.database.session.commit()


def setup(bot):
    bot.add_cog(Setup(bot))
