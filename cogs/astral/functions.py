import asyncio
import datetime
import traceback
from dataclasses import dataclass
from random import randint
from typing import Any, Optional, Union
from uuid import uuid4

import nextcord
from async_timeout import timeout
from base.base_cog import MilkCog
from nextcord.utils import format_dt

from .api import AstralGameSession
from .ui import GameMessage, GameStopperMessage


@dataclass
class GameTask:
    uuid: str
    guild: int
    channel: int
    task: Any
    members: list
    game_obj: Optional[AstralGameSession]


games = {}
players_alias = {}
arenas = {
    "0": "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
    "1": "–≤—É–ª–∫–∞–Ω",
    "2": "–¥–∂—É–Ω–≥–ª–∏",
    "3": "–ª–µ–¥–Ω–∏–∫",
    "4": "–ø—É—Å—Ç—ã–Ω—è",
    "5": "–∞—Ä–µ–Ω–∞ –º–∞–≥–æ–≤",
    "6": "–∫–ª–∞–¥–±–∏—â–µ",
    "7": "–∞—Ç–ª–∞–Ω—Ç–∏–¥–∞",
    "8": "–∞–¥",
    "9": "–ø–µ—à–µ—Ä–∞",
    "10": "–Ω–æ–≤—ã–π –≥–æ–¥",
    "r": "—Å–ª—É—á–∞–π–Ω–∞—è",
}


class Astral(MilkCog, name="–ê—Å—Ç—Ä–∞–ª"):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –ê—Å—Ç—Ä–∞–ª."""

    COG_EMOJI: str = "üå∞"

    def __init__(self, bot):
        self.bot = bot

    @MilkCog.slash_command()
    async def astral(self, interaction):
        ...

    @MilkCog.slash_command(
        description="–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –ê—Å—Ç—Ä–∞–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
        permission="moderator",
    )
    async def astral_stop(self, interaction: nextcord.Interaction):
        await interaction.response.defer()

        embed: nextcord.Embed = nextcord.Embed(
            title="–¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –ê—Å—Ç—Ä–∞–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
            timestamp=datetime.datetime.now(),
            colour=nextcord.Colour.random(),
        )

        if interaction.guild.id not in games:
            games[interaction.guild.id] = {}

        for num, uuid in enumerate(games[interaction.guild.id]):
            game: GameTask = games[interaction.guild.id][uuid]
            game_players: str = " // VS // ".join(
                [
                    ", ".join([str(player) for player in team])
                    for team in game.game_obj.teams
                ]
            )
            game_round: int = game.game_obj.round
            game_channel: Union[str, nextcord.TextChannel] = (
                interaction.guild.get_channel(
                    games[interaction.guild.id][uuid].channel
                ).name
                if interaction.guild.get_channel(
                    games[interaction.guild.id][uuid].channel
                )
                is not None
                else games[interaction.guild.id][uuid].channel
            )

            embed.add_field(
                name=f"{num + 1}. {game_players}",
                value=f"**–†–∞—É–Ω–¥:** {game_round}\n"
                + f"**–ö–∞–Ω–∞–ª:** {game_channel}\n"
                + f"**UUID:** {uuid}",
                inline=False,
            )

        view = GameStopperMessage(games, interaction.user)

        if embed.fields:
            message = await interaction.send(embed=embed, view=view)
            view.message = message
        else:
            await interaction.send("**–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã**")

    @astral.subcommand(
        description="–°—Ç–∞—Ä—Ç –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º",
    )
    async def bot(
        self,
        interaction: nextcord.Interaction,
        arena: str
        | None = nextcord.SlashOption(
            name="–∞—Ä–µ–Ω–∞",
            description="–∞—Ä–µ–Ω–∞ –¥–ª—è –∏–≥—Ä—ã",
            choices={
                "–í–Ω–µ –∞—Ä–µ–Ω—ã": "0",
                "–í—É–ª–∫–∞–Ω": "1",
                "–î–∂—É–Ω–≥–ª–∏": "2",
                "–õ–µ–¥–Ω–∏–∫": "3",
                "–ü—É—Å—Ç—ã–Ω—è": "4",
                "–ê—Ä–µ–Ω–∞ –ú–∞–≥–æ–≤": "5",
                "–ö–ª–∞–¥–±–∏—â–µ": "6",
                "–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞": "7",
                "–ê–¥": "8",
                "–ü–µ—à–µ—Ä–∞": "9",
                "–ù–æ–≤—ã–π –≥–æ–¥": "10",
                "–°–ª—É—á–∞–π–Ω–∞—è": "r",
            },
            required=False,
        ),
    ):
        if arena is None:
            arena = "0"
        if arena == "r":
            arena = str(randint(1, 10))
        uuid = str(uuid4())
        embed = nextcord.Embed(
            title="–°—Ç–∞—Ä—Ç –ê—Å—Ç—Ä–∞–ª–∞ —Å –±–æ—Ç–æ–º",
            description=f"–ê—Ä–µ–Ω–∞: {arenas.get(arena)}\n" + f"UUID –∏–≥—Ä—ã: {uuid}",
            colour=nextcord.Colour.random(),
        )

        message = await interaction.send(embed=embed)
        game_obj = AstralGameSession(
            self.bot, interaction.channel, uuid, arena=arena, boss="AstralBot"
        )
        game_obj.status_message = message
        game_obj.append_player(interaction.user)

        if interaction.guild.id not in games:
            games[interaction.guild.id] = {}

        games[interaction.guild.id][uuid] = GameTask(
            uuid=uuid,
            guild=interaction.guild.id,
            channel=interaction.channel_id,
            task=asyncio.create_task(self.game_process(game_obj, uuid)),
            members=[],
            game_obj=None,
        )

        await games[interaction.guild.id][uuid].task

    @astral.subcommand(
        description="–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã —Å –±–æ—Å—Å–æ–º",
    )
    async def boss(
        self,
        interaction: nextcord.Interaction,
        boss: str = nextcord.SlashOption(
            name="–±–æ—Å—Å",
            description="–∏–º—è –±–æ—Å—Å–∞",
            choices={
                "–¢–≤–∞—Ä—å –∏–∑ –±–µ–∑–¥–Ω—ã": "–¢–≤–∞—Ä—å –∏–∑ –±–µ–∑–¥–Ω—ã",
                "–ü–µ—Ä–≤–æ—Ä–æ–¥–Ω—ã–π –¥—Ä–∞–∫–æ–Ω": "–ü–µ—Ä–≤–æ—Ä–æ–¥–Ω—ã–π –¥—Ä–∞–∫–æ–Ω",
                "–ö–∏—Ü—É–Ω—ç": "–ö–∏—Ü—É–Ω—ç",
                "–ö—Ä–æ–≤–∞–≤—ã–π –ø—É–∑—ã—Ä—å": "–ö—Ä–æ–≤–∞–≤—ã–π –ø—É–∑—ã—Ä—å",
                "–ß–∏—Ç–µ—Ä–Ω—ã–π –±–æ—Ç": "AstralBotLol",
            },
            required=True,
        ),
        boss_control: bool
        | None = nextcord.SlashOption(
            name="–∫–æ–Ω—Ç—Ä–æ–ª—å",
            description="–∫–æ–Ω—Ç—Ä–æ–ª—å –±–æ—Å—Å–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç",
            choices={
                "–∏–≥—Ä–æ–∫": True,
                "–±–æ—Ç": False,
            },
            required=False,
        ),
        players: int
        | None = nextcord.SlashOption(
            name="–∏–≥—Ä–æ–∫–∏",
            description="–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–∏—Ä—É–µ—Ç –±–æ—Å—Å–∞, —Ç–æ –º–∏–Ω—É—Å 1)",
            choices={"2 –∏–≥—Ä–æ–∫–∞": 2, "4 –∏–≥—Ä–æ–∫–∞": 4, "6 –∏–≥—Ä–æ–∫–æ–≤": 6},
            required=False,
        ),
        arena: str
        | None = nextcord.SlashOption(
            name="–∞—Ä–µ–Ω–∞",
            description="–∞—Ä–µ–Ω–∞ –¥–ª—è –∏–≥—Ä—ã",
            choices={
                "–í–Ω–µ –∞—Ä–µ–Ω—ã": "0",
                "–í—É–ª–∫–∞–Ω": "1",
                "–î–∂—É–Ω–≥–ª–∏": "2",
                "–õ–µ–¥–Ω–∏–∫": "3",
                "–ü—É—Å—Ç—ã–Ω—è": "4",
                "–ê—Ä–µ–Ω–∞ –ú–∞–≥–æ–≤": "5",
                "–ö–ª–∞–¥–±–∏—â–µ": "6",
                "–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞": "7",
                "–ê–¥": "8",
                "–ü–µ—à–µ—Ä–∞": "9",
                "–ù–æ–≤—ã–π –≥–æ–¥": "10",
                "–°–ª—É—á–∞–π–Ω–∞—è": "r",
            },
            required=False,
        ),
    ):

        if boss_control is None:
            boss_control = False
        if players is None:
            players = 2
        if arena is None:
            arena = "0"
        if arena == "r":
            arena = str(randint(1, 10))
        uuid = str(uuid4())

        embed = nextcord.Embed(
            title="–°—Ç–∞—Ä—Ç –ê—Å—Ç—Ä–∞–ª–∞ —Å –±–æ—Å—Å–æ–º",
            description=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {players if boss_control else players - 1}\n"
            + f"–ë–æ—Å—Å: {boss}\n"
            + f"–ö–æ–Ω—Ç—Ä–æ–ª—å –±–æ—Å—Å–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç: {'–∏–≥—Ä–æ–∫' if boss_control else '–±–æ—Ç'}\n"
            + f"–ê—Ä–µ–Ω–∞: {arenas.get(arena)}\n"
            + f"UUID –∏–≥—Ä—ã: {uuid}",
            colour=nextcord.Colour.random(),
        )

        message = await interaction.send(embed=embed)
        game_obj = AstralGameSession(
            self.bot,
            interaction.channel,
            uuid,
            dm=True,
            players=players,
            boss=boss,
            boss_control=boss_control,
            arena=arena,
        )
        game_obj.status_message = message
        game_obj.append_player(interaction.user)

        if players != 2 or game_obj.boss_control:
            new_view = nextcord.ui.View()
            new_view.add_item(
                nextcord.ui.Button(
                    style=nextcord.ButtonStyle.gray, label="–ü–æ–¥—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
                )
            )
            await message.edit(
                content=f"–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã —Å –±–æ—Å—Å–æ–º {len(game_obj.players)}/{game_obj.players_count - 1 if not game_obj.boss_control else game_obj.players_count}",
                view=new_view,
                embed=None,
            )
            try:
                async with timeout(180):
                    while True:
                        inter: nextcord.Interaction = await self.bot.wait_for(
                            "interaction",
                            check=lambda m: m.user != interaction.user
                            and m.channel == interaction.channel,
                        )
                        await interaction.followup.send(
                            f"–ò–≥—Ä–æ–∫ **{inter.user.display_name}** –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!"
                        )
                        game_obj.append_player(inter.user)
                        if game_obj.ready_to_start():
                            await message.edit(content="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã!", view=None)
                            break
                        else:
                            await message.edit(
                                content=f"–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ {len(game_obj.players)}/{game_obj.players_count - 1}",
                                view=new_view,
                            )
            except asyncio.TimeoutError:
                await message.edit(content="–°—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω", view=None)
                return

        if interaction.guild.id not in games:
            games[interaction.guild.id] = {}

        games[interaction.guild.id][uuid] = GameTask(
            uuid=uuid,
            guild=interaction.guild.id,
            channel=interaction.channel_id,
            task=asyncio.create_task(self.game_process(game_obj, uuid)),
            members=[],
            game_obj=None,
        )

        await games[interaction.guild.id][uuid].task

    @astral.subcommand(
        description="–°—Ç–∞—Ä—Ç –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ê—Å—Ç—Ä–∞–ª–∞",
    )
    async def astral_start(
        self,
        interaction: nextcord.Interaction,
        players: int
        | None = nextcord.SlashOption(
            name="–∏–≥—Ä–æ–∫–∏",
            description="–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤",
            choices={"2 –∏–≥—Ä–æ–∫–∞": 2, "4 –∏–≥—Ä–æ–∫–∞": 4, "6 –∏–≥—Ä–æ–∫–æ–≤": 6},
            required=False,
        ),
        dm: bool
        | None = nextcord.SlashOption(
            name="dm",
            description="death match (–≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö)",
            choices={
                "–≤–∫–ª—é—á–µ–Ω": True,
                "—É–ª—ã–±–∫–∞": False,
            },
            required=False,
        ),
        arena: str
        | None = nextcord.SlashOption(
            name="–∞—Ä–µ–Ω–∞",
            description="–∞—Ä–µ–Ω–∞ –¥–ª—è –∏–≥—Ä—ã",
            choices={
                "–í–Ω–µ –∞—Ä–µ–Ω—ã": "0",
                "–í—É–ª–∫–∞–Ω": "1",
                "–î–∂—É–Ω–≥–ª–∏": "2",
                "–õ–µ–¥–Ω–∏–∫": "3",
                "–ü—É—Å—Ç—ã–Ω—è": "4",
                "–ê—Ä–µ–Ω–∞ –ú–∞–≥–æ–≤": "5",
                "–ö–ª–∞–¥–±–∏—â–µ": "6",
                "–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞": "7",
                "–ê–¥": "8",
                "–ü–µ—à–µ—Ä–∞": "9",
                "–ù–æ–≤—ã–π –≥–æ–¥": "10",
                "–°–ª—É—á–∞–π–Ω–∞—è": "r",
            },
            required=False,
        ),
    ):

        if dm is None:
            dm = False

        if players is None:
            players = "2"

        if arena is None:
            arena = "0"
        if arena == "r":
            arena = str(randint(1, 10))
        uuid = str(uuid4())

        embed = nextcord.Embed(
            title="–°—Ç–∞—Ä—Ç –ê—Å—Ç—Ä–∞–ª–∞",
            description=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {players}\n"
            + f"Deathmatch: {'–≤–∫–ª—é—á–µ–Ω' if dm else '–æ—Ç–∫–ª—é—á–µ–Ω'}\n"
            + f"–ê—Ä–µ–Ω–∞: {arenas.get(arena)}\n"
            + f"UUID –∏–≥—Ä—ã: {uuid}",
            colour=nextcord.Colour.random(),
        )

        message = await interaction.send(embed=embed)

        game_obj = AstralGameSession(
            self.bot,
            interaction.channel,
            uuid,
            dm=dm,
            players=int(players),
            arena=arena,
        )
        game_obj.status_message = message
        game_obj.append_player(interaction.user)
        new_view = nextcord.ui.View()
        new_view.add_item(
            nextcord.ui.Button(style=nextcord.ButtonStyle.gray, label="–ü–æ–¥—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
        )

        await message.edit(
            content=f"–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ {len(game_obj.players)}/{game_obj.players_count}",
            view=new_view,
            embed=None,
        )
        try:
            async with timeout(180):
                while True:
                    inter: nextcord.Interaction = await self.bot.wait_for(
                        "interaction",
                        check=lambda m: m.user != interaction.user
                        and m.channel == interaction.channel,
                    )
                    await interaction.followup.send(
                        f"–ò–≥—Ä–æ–∫ **{inter.user.display_name}** –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!"
                    )
                    game_obj.append_player(inter.user)
                    if game_obj.ready_to_start():
                        await message.edit(content="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã!", view=None)
                        break
                    else:
                        await message.edit(
                            content=f"–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ {len(game_obj.players)}/{game_obj.players_count}",
                        )
        except asyncio.TimeoutError:
            await message.edit(content="–°—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω", view=None)
            return

        if interaction.guild.id not in games:
            games[interaction.guild.id] = {}

        games[interaction.guild.id][uuid] = GameTask(
            uuid=uuid,
            guild=interaction.guild.id,
            channel=interaction.channel_id,
            task=asyncio.create_task(self.game_process(game_obj, uuid)),
            members=[],
            game_obj=None,
        )

        await games[interaction.guild.id][uuid].task

    async def game_process(self, game: AstralGameSession, uuid: str):
        embed_color = nextcord.Colour.random()

        for player in game.players:
            if player.member is not None:
                players_alias[player.member.id] = game.channel.guild

        time_mark = datetime.datetime.now()
        if not self.bot.dev:
            await game.init_tables()
            time_status = datetime.datetime.now() + datetime.timedelta(
                minutes=1, seconds=10
            )
            time_finish = datetime.datetime.now() + datetime.timedelta(
                minutes=2, seconds=30
            )
            await game.status_message.edit(
                content=f"""> **__–ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏__**

**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** *—Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã*
**–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:** {format_dt(time_status, "T")}
**–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:** {format_dt(time_finish, "T")}""",
                view=None,
                embed=None,
            )
        else:
            time_finish = datetime.datetime.now() + datetime.timedelta(
                minutes=1, seconds=10
            )
        try:
            start_status = await game.start(time_finish)
            self.bot.logger.debug(start_status)
            if "error" in start_status:
                return await game.channel.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {start_status}")
        except TimeoutError:
            await asyncio.sleep(5)
            await game.channel.send(
                "**–í–ù–ò–ú–ê–ù–ò–ï:** –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ê—Å—Ç—Ä–∞–ª–æ–º –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è"
            )

        games[game.channel.guild.id][uuid].members = game.players_ids
        games[game.channel.guild.id][uuid].game_obj = game

        if not await game.put_links(0):
            await game.channel.send("–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ê—Å—Ç—Ä–∞–ª—É!")
            await game.stop()
            return

        premove_time_mark = datetime.datetime.now()
        postmove_time_mark = datetime.datetime.now()

        try:
            while True:
                info = await game.get_game_message()
                await game.channel.trigger_typing()

                if not info and isinstance(info, bool):
                    await game.channel.send("–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ê—Å—Ç—Ä–∞–ª–∞!")
                    break

                info_s = info[0]
                mentions = " ".join(
                    [
                        player.member.mention
                        for player in game.players
                        if player.member is not None
                    ]
                )

                emb = nextcord.Embed()
                emb.add_field(name=f"–†–∞—É–Ω–¥: {game.round}", value=info_s)
                try:
                    if game.round == 0:
                        emb.set_footer(
                            text=f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–≥—Ä–µ –≤ –ê—Å—Ç—Ä–∞–ª –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: https://clck.ru/YXKHB\n"
                            + f"UUID: {uuid}\n–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {f'{datetime.datetime.now() - time_mark}'[:-7]}"
                        )
                    else:
                        emb.set_footer(
                            text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞: {f'{datetime.datetime.now() - time_mark}'[:-7]}\n"
                            + f"–í—Ä–µ–º—è —Ö–æ–¥–∞: {f'{postmove_time_mark - premove_time_mark}'[:-7]}"
                        )
                except:
                    pass

                if info_s.find("–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.") != -1:
                    emb.colour = nextcord.Colour.brand_red()

                    try:
                        for art in info[1]:
                            await game.channel.send(art)
                    except:
                        pass
                    await game.channel.send(mentions, embed=emb)
                    return
                else:
                    await game.update_info()
                    emb.colour = embed_color

                    try:
                        for art in info[1]:
                            await game.channel.send(art)
                    except:
                        pass

                    message = await game.channel.send(mentions, embed=emb)

                    players_with_ability: list[int] = [
                        player.member.id
                        for player in game.players
                        if player.member is not None
                        and player.ability
                        and not player.moved
                    ]
                    premove_time_mark = datetime.datetime.now()
                    if players_with_ability:
                        game.view = GameMessage(game)
                        game.view.message = message
                        await message.edit(view=game.view)
                        await game.view.wait()
                        postmove_time_mark = datetime.datetime.now()
                        response = game.view.response

                        for response_element in response:
                            for i in range(len(game.players)):
                                if game.players[i].member is not None:
                                    if (
                                        response_element["id"]
                                        == game.players[i].member.id
                                    ):
                                        game.players[i].move = response_element["spell"]
                                        game.players[
                                            i
                                        ].move_direction = response_element["direction"]

                    time_mark = datetime.datetime.now()
                    round_change_status = await game.try_to_move()
                    if "error" not in round_change_status:
                        game.prepare_for_new_round()
                        game.view = None
                        game.round += 1
                    else:
                        error_counter = -1
                        game.round_replay()
                        while "error" in round_change_status and error_counter != 3:
                            error_counter += 1
                            await game.channel.send(
                                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {round_change_status}\n–ü–æ–≤—Ç–æ—Ä —Ä–∞—É–Ω–¥–∞!"
                            )

                            try:
                                for art in info[1]:
                                    await game.channel.send(art)
                            except:
                                pass

                            message = await game.channel.send(mentions, embed=emb)

                            players_with_ability: list[int] = [
                                player.member.id
                                for player in game.players
                                if player.member is not None
                                and player.ability
                                and not player.moved
                            ]
                            premove_time_mark = datetime.datetime.now()
                            if players_with_ability:
                                game.view = GameMessage(game)
                                game.view.message = message
                                await message.edit(view=game.view)
                                await game.view.wait()
                                postmove_time_mark = datetime.datetime.now()
                                response = game.view.response

                                for response_element in response:
                                    for i in range(len(game.players)):
                                        if game.players[i].member is not None:
                                            if (
                                                response_element["id"]
                                                == game.players[i].member.id
                                            ):
                                                game.players[i].move = response_element[
                                                    "spell"
                                                ]
                                                game.players[
                                                    i
                                                ].move_direction = response_element[
                                                    "direction"
                                                ]

                            time_mark = datetime.datetime.now()
                            round_change_status = await game.try_to_move()
                            if "error" not in round_change_status:
                                game.prepare_for_new_round()
                                game.view = None
                                game.round += 1
                                error_counter = 0
        except asyncio.CancelledError:
            await game.channel.send("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã!")
        except Exception as error:
            exception_str = "\n".join(traceback.format_exception(error))
            self.bot.logger.error(exception_str + "\n")
            try:
                owner: nextcord.User = await self.bot.fetch_user(
                    self.bot.settings.get("owner_id", None)
                )
                await owner.send("Astral Game Error: " + exception_str)
                self.bot.logger.debug(
                    f"Traceback have been sended to user. ID: {owner.id}"
                )
            except:
                self.bot.logger.debug(
                    f"Error was ocured when sending traceback to user. ID: {self.bot.settings.get('owner_id', None)}"
                )
            await game.channel.send(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {exception_str}\n–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
            )
        finally:
            for player in game.players:
                if player.member is not None:
                    try:
                        del players_alias[player.member.id]
                    except:
                        pass

            await game.stop()
            if game.tables is not None:
                await game.tables.delete_temp_astral_table(game.spread_sheet_url)
            del games[game.channel.guild.id][uuid]


def setup(bot):
    bot.add_cog(Astral(bot))
