import nextcord
from nextcord.ext import commands
from nextcord.ext.commands import Context
from uuid import uuid4
from async_timeout import timeout
from typing import Any, Optional
from dataclasses import dataclass
import asyncio
from modules.checkers import check_moderator_permission
import datetime
from .api import AstralGameSession
from .ui import (
    AstralBotStart,
    AstralBossStart,
    AstralPlayersStart,
    GameMessage,
    get_spell_from_modal,
    get_direction_from_view,
    spell_check,
)


@dataclass
class GameTask:
    uuid: str
    guild: int
    channel: int
    task: Any
    members: list
    game_obj: Any


games = {}
players_alias = {}


class Astral(commands.Cog, name="–ê—Å—Ç—Ä–∞–ª"):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –ê—Å—Ç—Ä–∞–ª."""

    COG_EMOJI: str = "üå∞"

    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_message(self, message: nextcord.Message):
        if message.author == self.bot.user:
            return

        if message.guild is not None:
            return

        if message.author.id not in players_alias:
            return await message.reply(
                f"{message.author.mention}, –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ!"
            )

        await message.reply(
            f"–ò–≥—Ä–æ–∫: {message.author.mention}\n–°–µ—Ä–≤–µ—Ä: {players_alias[message.author.id].name} ({players_alias[message.author.id].id})"
        )
        for uuid in games[players_alias[message.author.id].id]:
            if (
                message.author.id
                in games[players_alias[message.author.id].id][uuid].members
            ):
                game = games[players_alias[message.author.id].id][uuid].game_obj
                if game.view is None:
                    return await message.reply(
                        f"{message.author.mention}, –ø—Ä–∏—ë–º —Å–ø–µ–ª–ª–æ–≤ –Ω–µ –Ω–∞—á–∞—Ç!"
                    )

                if message.author.id not in game.view.players_with_ability:
                    try:
                        await message.reply(
                            "–ù–∞ –≤–∞—Å –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—è.",
                        )
                        return True
                    except:
                        return True

                if message.author.id in game.view.players_moved_id:
                    try:
                        await message.reply(
                            "–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥!",
                        )
                        return True
                    except:
                        return True

                player_name = game.players[
                    game.players_ids.index(message.author.id)
                ].name

                if message.author.id in game.view.players_need_direction:
                    try:
                        direction = game.players[int(message.content) - 1].name
                    except:
                        return await message.reply(
                            f"{message.author.mention}, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!"
                        )

                    game.view.response.append(
                        {
                            "name": game.players[
                                game.players_ids.index(message.author.id)
                            ].name,
                            "spell": game.view.players_temp_move[message.author.id],
                            "direction": direction,
                        }
                    )
                    game.view.players_moved_id.append(message.author.id)

                    game.view.players_moved += 1

                    if (
                        game.players[
                            game.players_ids.index(message.author.id)
                        ].effects.find("—Å—Ç–∞–Ω")
                        == -1
                        and game.players[
                            game.players_ids.index(message.author.id)
                        ].effects.find("—Å–æ–Ω")
                        == -1
                    ):

                        try:
                            await message.reply("–•–æ–¥ –ø—Ä–∏–Ω—è—Ç!")
                            await game.channel.send(
                                f"–•–æ–¥ –±—ã–ª —Å–¥–µ–ª–∞–Ω –∏–≥—Ä–æ–∫–æ–º **{player_name}**!"
                            )
                        except:
                            pass

                    if game.view.players_moved == game.view.players_with_ability_count:
                        await game.view.on_timeout()
                        game.view.stop()

                    return True

                spell: Optional[str] = spell_check(
                    game.players[game.players_ids.index(message.author.id)],
                    message.content,
                )

                if spell is not None:
                    if spell in game.game_spells:
                        if (
                            spell in ["119", "140", "168", "242", "245"]
                            or len(game.players) == 4
                        ):
                            game.view.players_need_direction.append(message.author.id)
                            game.view.players_temp_move[message.author.id] = spell
                            return await message.reply(
                                "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: "
                                + ", ".join(
                                    [
                                        f"{num+1}. {player.name}"
                                        for num, player in enumerate(game.players)
                                    ]
                                )
                            )
                        else:
                            direction = None

                        game.view.response.append(
                            {
                                "name": game.players[
                                    game.players_ids.index(message.author.id)
                                ].name,
                                "spell": spell,
                                "direction": direction,
                            }
                        )
                        game.view.players_moved_id.append(message.author.id)

                        game.view.players_moved += 1

                        if (
                            game.players[
                                game.players_ids.index(message.author.id)
                            ].effects.find("—Å—Ç–∞–Ω")
                            == -1
                            and game.players[
                                game.players_ids.index(message.author.id)
                            ].effects.find("—Å–æ–Ω")
                            == -1
                        ):

                            try:
                                await message.reply("–•–æ–¥ –ø—Ä–∏–Ω—è—Ç!")
                                await game.channel.send(
                                    f"–•–æ–¥ –±—ã–ª —Å–¥–µ–ª–∞–Ω –∏–≥—Ä–æ–∫–æ–º **{player_name}**!"
                                )
                            except:
                                pass

                        if (
                            game.view.players_moved
                            == game.view.players_with_ability_count
                        ):
                            await game.view.on_timeout()
                            game.view.stop()
                    else:
                        try:
                            await message.reply(spell)
                        except:
                            pass
                else:
                    return True

    @nextcord.slash_command(guild_ids=[], force_global=True, description="–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥")
    async def move(self, interaction: nextcord.Interaction):
        if interaction.guild is None or interaction.guild.id not in games:
            return await interaction.send("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ!", ephemeral=True)

        for uuid in games[interaction.guild.id]:
            if interaction.user.id in games[interaction.guild.id][uuid].members:
                game = games[interaction.guild.id][uuid].game_obj
                if interaction.user.id not in game.view.players_with_ability:
                    try:
                        await interaction.send(
                            "–ù–∞ –≤–∞—Å –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—è.",
                            ephemeral=True,
                        )
                        return True
                    except:
                        return True

                if interaction.user.id in game.view.players_moved_id:
                    try:
                        await interaction.send(
                            "–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥!",
                            ephemeral=True,
                        )
                        return True
                    except:
                        return True

                spell: Optional[str] = await get_spell_from_modal(
                    interaction,
                    game.players[game.players_ids.index(interaction.user.id)],
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
                )

                if spell is not None:
                    if spell in game.game_spells:
                        if (
                            spell in ["119", "140", "168", "242", "245"]
                            or len(game.players) == 4
                        ):
                            direction = await get_direction_from_view(interaction, game)
                        else:
                            direction = None

                        game.view.response.append(
                            {
                                "name": game.players[
                                    game.players_ids.index(interaction.user.id)
                                ].name,
                                "spell": spell,
                                "direction": direction,
                            }
                        )
                        game.view.players_moved_id.append(interaction.user.id)

                        game.view.players_moved += 1

                        if (
                            game.players[
                                game.players_ids.index(interaction.user.id)
                            ].effects.find("—Å—Ç–∞–Ω")
                            == -1
                            and game.players[
                                game.players_ids.index(interaction.user.id)
                            ].effects.find("—Å–æ–Ω")
                            == -1
                        ):

                            try:
                                await interaction.send(
                                    f"–•–æ–¥ –±—ã–ª —Å–¥–µ–ª–∞–Ω –∏–≥—Ä–æ–∫–æ–º **{interaction.user.display_name}**!"
                                )
                            except:
                                try:
                                    await game.channel.send(
                                        f"–•–æ–¥ –±—ã–ª —Å–¥–µ–ª–∞–Ω –∏–≥—Ä–æ–∫–æ–º **{interaction.user.display_name}**!"
                                    )
                                except:
                                    pass

                        if (
                            game.view.players_moved
                            == game.view.players_with_ability_count
                        ):
                            await game.view.on_timeout()
                            game.view.stop()
                    else:
                        try:
                            await interaction.send(spell, ephemeral=True)
                        except:
                            try:
                                await game.channel.send(spell)
                            except:
                                pass
                else:
                    return True

        try:
            return await interaction.response.send_message("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ!")
        except nextcord.InteractionResponded:
            pass

    @nextcord.slash_command(
        guild_ids=[], force_global=True, description="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É"
    )
    async def table(self, interaction: nextcord.Interaction):
        if interaction.guild is None or interaction.guild.id not in games:
            return await interaction.send("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ!", ephemeral=True)

        for uuid in games[interaction.guild.id]:
            if interaction.user.id in games[interaction.guild.id][uuid].members:
                game = games[interaction.guild.id][uuid].game_obj
                try:
                    await interaction.send(
                        game.players[game.players_ids.index(interaction.user.id)].link,
                        ephemeral=True,
                    )
                    return True
                except:
                    return True

        try:
            return await interaction.response.send_message("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ!")
        except nextcord.InteractionResponded:
            pass

    @commands.command(
        brief="–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –ê—Å—Ç—Ä–∞–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    )
    @commands.check(check_moderator_permission)
    @commands.guild_only()
    async def –∞—Å—Ç—Ä–∞–ª_—Å—Ç–æ–ø(self, ctx: Context, game_uuid: str = ""):
        if game_uuid != "":
            if ctx.guild.id in games:
                if game_uuid in games[ctx.guild.id]:
                    games[ctx.guild.id][game_uuid].task.cancel()

                    await games[ctx.guild.id][game_uuid].task
                    return await ctx.send(f"–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. ({ctx.author.mention})")
                else:
                    return await ctx.send("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–≥—Ä—ã —Å —Ç–∞–∫–∏–º UUID")
            else:
                return await ctx.send("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–≥—Ä—ã —Å —Ç–∞–∫–∏–º UUID")

        embed: nextcord.Embed = nextcord.Embed(
            title="–¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –ê—Å—Ç—Ä–∞–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
            timestamp=datetime.datetime.now(),
            colour=nextcord.Colour.random(),
        )

        if ctx.guild.id not in games:
            games[ctx.guild.id] = {}

        for num, uuid in enumerate(games[ctx.guild.id]):
            embed.add_field(
                name=f"{num + 1}. {games[ctx.guild.id][uuid].uuid}",
                value=f"–ö–∞–Ω–∞–ª: {ctx.guild.get_channel(games[ctx.guild.id][uuid].channel).name if ctx.guild.get_channel(games[ctx.guild.id][uuid].channel) is not None else games[ctx.guild.id][uuid].channel}",
                inline=False,
            )

        await ctx.send(embed=embed)

    @commands.command(brief="–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º")
    @commands.guild_only()
    async def –∞—Å—Ç—Ä–∞–ª_–±–æ—Ç(self, ctx):

        view = AstralBotStart(ctx.author)
        uuid = str(uuid4())

        embed: nextcord.Embed = nextcord.Embed(
            title="–°—Ç–∞—Ä—Ç –ê—Å—Ç—Ä–∞–ª–∞ —Å –±–æ—Ç–æ–º",
            description=f"UUID –∏–≥—Ä—ã: {uuid}",
            colour=nextcord.Colour.random(),
        )

        message = await ctx.send(embed=embed, view=view)
        await view.wait()

        if view.response is not None and not view.response["status"]:
            await message.edit("–°—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω", view=None)
            return
        else:
            await message.edit("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã!", view=None, embed=None)
            game_obj = await AstralGameSession.create(
                self.bot, ctx.channel, view.response, uuid
            )
            game_obj.status_message = message
            game_obj.append_player(ctx.author)

            await message.edit(
                f'–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º. {"–°—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–π–¥—ë—Ç –Ω–∞ –∞—Ä–µ–Ω–µ." if view.response["arena"] != "0" else ""}',
                view=None,
            )

            if ctx.guild.id not in games:
                games[ctx.guild.id] = {}

            games[ctx.guild.id][uuid] = GameTask(
                uuid=uuid,
                guild=ctx.guild.id,
                channel=ctx.channel.id,
                task=asyncio.create_task(self.game_process(game_obj, uuid)),
                members=[],
                game_obj=None,
            )

            await games[ctx.guild.id][uuid].task

    @commands.command(brief="–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã —Å –±–æ—Å—Å–æ–º")
    @commands.guild_only()
    async def –∞—Å—Ç—Ä–∞–ª_–±–æ—Å—Å(self, ctx):

        view = AstralBossStart(ctx.author)
        uuid = str(uuid4())

        embed: nextcord.Embed = nextcord.Embed(
            title="–°—Ç–∞—Ä—Ç –ê—Å—Ç—Ä–∞–ª–∞ —Å –±–æ—Å—Å–æ–º",
            description=f"UUID –∏–≥—Ä—ã: {uuid}",
            colour=nextcord.Colour.random(),
        )

        message = await ctx.send(embed=embed, view=view)
        await view.wait()

        if view.response is not None and not view.response["status"]:
            await message.edit("–°—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω", view=None)
            return
        else:
            await message.edit("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã!", view=None, embed=None)
            game_obj = await AstralGameSession.create(
                self.bot, ctx.channel, view.response, uuid
            )
            game_obj.status_message = message
            game_obj.append_player(ctx.author)

            if view.response["players"] != 2:
                new_view = nextcord.ui.View()
                new_view.add_item(
                    nextcord.ui.Button(
                        style=nextcord.ButtonStyle.gray, label="–ü–æ–¥—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
                    )
                )

                await message.edit(
                    f'–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã —Å –±–æ—Å—Å–æ–º {len(game_obj.players)}/{game_obj.players_count-1}. {"–°—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–π–¥—ë—Ç –Ω–∞ –∞—Ä–µ–Ω–µ." if view.response["arena"] != "0" else ""}',
                    view=new_view,
                    embed=None,
                )
                try:
                    async with timeout(180):
                        while True:
                            interaction: nextcord.Interaction = await self.bot.wait_for(
                                "interaction", check=lambda m: m.user != ctx.author
                            )
                            await ctx.send(
                                f"–ò–≥—Ä–æ–∫ **{interaction.user.display_name}** –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!"
                            )
                            game_obj.append_player(interaction.user)
                            if game_obj.ready_to_start():
                                await message.edit("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã!", view=None)
                                break
                            else:
                                await message.edit(
                                    f'–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ {len(game_obj.players)}/{game_obj.players_count-1} . {"–°—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–π–¥—ë—Ç –Ω–∞ –∞—Ä–µ–Ω–µ." if view.response["arena"] != "0" else ""}',
                                    view=new_view,
                                )
                except asyncio.TimeoutError:
                    await message.edit("–°—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω", view=None)
                    return

            else:
                await message.edit(
                    f'–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –±–æ—Å—Å–æ–º. {"–°—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–π–¥—ë—Ç –Ω–∞ –∞—Ä–µ–Ω–µ." if view.response["arena"] != "0" else ""}',
                    view=None,
                )

            if ctx.guild.id not in games:
                games[ctx.guild.id] = {}

            games[ctx.guild.id][uuid] = GameTask(
                uuid=uuid,
                guild=ctx.guild.id,
                channel=ctx.channel.id,
                task=asyncio.create_task(self.game_process(game_obj, uuid)),
                members=[],
                game_obj=None,
            )

            await games[ctx.guild.id][uuid].task

    @commands.command(brief="–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã")
    @commands.guild_only()
    async def –∞—Å—Ç—Ä–∞–ª_—Å—Ç–∞—Ä—Ç(self, ctx):

        view = AstralPlayersStart(ctx.author)
        uuid = str(uuid4())

        embed: nextcord.Embed = nextcord.Embed(
            title="–°—Ç–∞—Ä—Ç –ê—Å—Ç—Ä–∞–ª–∞",
            description=f"UUID –∏–≥—Ä—ã: {uuid}",
            colour=nextcord.Colour.random(),
        )

        message = await ctx.send(embed=embed, view=view)
        await view.wait()

        if view.response is not None and not view.response["status"]:
            await message.edit("–°—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω", view=None)
            return
        else:
            await message.edit("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã!", view=None, embed=None)
            game_obj = await AstralGameSession.create(
                self.bot, ctx.channel, view.response, uuid
            )
            game_obj.status_message = message
            game_obj.append_player(ctx.author)
            new_view = nextcord.ui.View()
            new_view.add_item(
                nextcord.ui.Button(
                    style=nextcord.ButtonStyle.gray, label="–ü–æ–¥—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
                )
            )

            await message.edit(
                f'–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ {"1/2" if view.response["players"] == 2 else "1/4"}. {"–†–µ–∂–∏–º DM. " if view.response["dm"] else ""}{"–°—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–π–¥—ë—Ç –Ω–∞ –∞—Ä–µ–Ω–µ." if view.response["arena"] != "0" else ""}',
                view=new_view,
                embed=None,
            )
            try:
                async with timeout(180):
                    while True:
                        interaction: nextcord.Interaction = await self.bot.wait_for(
                            "interaction", check=lambda m: m.user != ctx.author
                        )
                        await ctx.send(
                            f"–ò–≥—Ä–æ–∫ **{interaction.user.display_name}** –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!"
                        )
                        game_obj.append_player(interaction.user)
                        if game_obj.ready_to_start():
                            await message.edit("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã!", view=None)
                            break
                        else:
                            await message.edit(
                                f'–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ {len(game_obj.players)}/{game_obj.players_count} . {"–†–µ–∂–∏–º DM. " if view.response["dm"] else ""}{"–°—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–π–¥—ë—Ç –Ω–∞ –∞—Ä–µ–Ω–µ." if view.response["arena"] != "0" else ""}',
                                view=new_view,
                            )
            except asyncio.TimeoutError:
                await message.edit("–°—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω", view=None)

                return

            if ctx.guild.id not in games:
                games[ctx.guild.id] = {}

            games[ctx.guild.id][uuid] = GameTask(
                uuid=uuid,
                guild=ctx.guild.id,
                channel=ctx.channel.id,
                task=asyncio.create_task(self.game_process(game_obj, uuid)),
                members=[],
                game_obj=None,
            )

            await games[ctx.guild.id][uuid].task

    async def game_process(self, game: AstralGameSession, uuid: str):
        embed_color = nextcord.Colour.random()

        for player in game.players:
            if player.member is not None:
                players_alias[player.member.id] = game.channel.guild

        time_mark = datetime.datetime.now()
        try:
            start_status = await game.start()
            self.bot.logger.debug(start_status)
            if "error" in start_status:
                return await game.channel.send(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {start_status['error']}"
                )
        except TimeoutError:
            await asyncio.sleep(5)
            await game.channel.send(
                "**–í–ù–ò–ú–ê–ù–ò–ï:** –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ê—Å—Ç—Ä–∞–ª–æ–º –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è"
            )

        games[game.channel.guild.id][uuid].members = game.players_ids
        games[game.channel.guild.id][uuid].game_obj = game

        if not await game.put_links(0):
            await game.channel.send("–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ê—Å—Ç—Ä–∞–ª—É!")
            await game.stop()
            return

        round = 0
        try:
            while True:
                info = await game.get_game_message()
                await game.channel.trigger_typing()

                if not info and isinstance(info, bool):
                    await game.channel.send("–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ê—Å—Ç—Ä–∞–ª–∞!")
                    break

                info_s = info[0]
                mentions = " ".join(
                    [
                        player.member.mention
                        for player in game.players
                        if player.member is not None
                    ]
                )

                emb = nextcord.Embed()
                emb.add_field(name=f"–†–∞—É–Ω–¥: {round}", value=info_s)
                if round == 0:
                    emb.set_footer(
                        text=f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–≥—Ä–µ –≤ –ê—Å—Ç—Ä–∞–ª –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: https://clck.ru/YXKHB\nUUID: {uuid}\n–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {f'{datetime.datetime.now() - time_mark}'[:-7]}\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ /move –∏ /table –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ–¥ –≤ –õ–° –±–æ—Ç–∞, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç."
                    )
                else:
                    emb.set_footer(
                        text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞: {f'{datetime.datetime.now() - time_mark}'[:-7]}\n–í—Ä–µ–º—è —Ö–æ–¥–∞: {f'{postmove_time_mark - premove_time_mark}'[:-7]}\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ /move –∏ /table –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ–¥ –≤ –õ–° –±–æ—Ç–∞, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç."
                    )

                if info_s.find("–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.") != -1:
                    emb.colour = nextcord.Colour.brand_red()

                    try:
                        for art in info[1]:
                            await game.channel.send(art)
                    except:
                        pass
                    await game.channel.send(mentions, embed=emb)
                    return
                else:
                    await game.update_info()
                    emb.colour = embed_color

                    try:
                        for art in info[1]:
                            await game.channel.send(art)
                    except:
                        pass

                    message = await game.channel.send(mentions, embed=emb)

                    game.view = GameMessage(game)
                    game.view.message = message
                    await message.edit(view=game.view)
                    premove_time_mark = datetime.datetime.now()
                    await game.view.wait()
                    postmove_time_mark = datetime.datetime.now()
                    response = game.view.response

                    for response_element in response:
                        for i in range(len(game.players)):
                            if response_element["name"] == game.players[i].name:
                                game.players[i].move = response_element["spell"]
                                game.players[i].move_direction = response_element[
                                    "direction"
                                ]

                    time_mark = datetime.datetime.now()
                    round_change_status = await game.try_to_move()
                    if "error" not in round_change_status:
                        game.prepare_for_new_round()
                        game.view = None
                        round += 1
                    else:
                        error_counter = -1
                        game.round_replay()
                        while "error" in round_change_status and error_counter != 3:
                            error_counter += 1
                            await game.channel.send(
                                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {round_change_status['error']}\n–ü–æ–≤—Ç–æ—Ä —Ä–∞—É–Ω–¥–∞!"
                            )

                            message = await game.channel.send(mentions, embed=emb)

                            try:
                                for art in info[1]:
                                    await game.channel.send(art)
                            except:
                                pass

                            game.view = GameMessage(game)
                            game.view.message = message
                            await message.edit(view=game.view)
                            premove_time_mark = datetime.datetime.now()
                            await game.view.wait()
                            postmove_time_mark = datetime.datetime.now()
                            response = game.view.response

                            for response_element in response:
                                for i in range(len(game.players)):
                                    if response_element["name"] == game.players[i].name:
                                        game.players[i].move = response_element["spell"]
                                        game.players[
                                            i
                                        ].move_direction = response_element["direction"]

                            time_mark = datetime.datetime.now()
                            round_change_status = await game.try_to_move()
                            if "error" not in round_change_status:
                                game.prepare_for_new_round()
                                game.view = None
                                round += 1
                                error_counter = 0
        except asyncio.CancelledError:
            await game.channel.send("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã!")
        except Exception as e:
            await game.channel.send(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
            )
        finally:
            for player in game.players:
                if player.member is not None:
                    try:
                        del players_alias[player.member.id]
                    except:
                        pass

            await game.stop()
            del games[game.channel.guild.id][uuid]


def setup(bot):
    bot.add_cog(Astral(bot))
