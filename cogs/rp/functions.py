from datetime import datetime
from random import randint
from typing import Optional

import nextcord
import requests
from base.base_cog import MilkCog
from faker import Faker
from nextcord.ext.commands import Context


class RP(MilkCog, name="RolePlay"):
    """RolePlay –∫–æ–º–∞–Ω–¥—ã"""

    COG_EMOJI: str = "üé≠"

    def __init__(self, bot):
        self.bot = bot

    @MilkCog.slash_command(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    async def ship(
        self,
        interaction: nextcord.Interaction,
        member_1: Optional[nextcord.Member] = nextcord.SlashOption(
            name="–ø–µ—Ä–≤—ã–π",
            description="–ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —à–∏–ø–∞, –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—Ç–æ—Ä–æ–≥–æ, —à–∏–ø–ø–µ—Ä–∏—Ç—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º",
            required=True,
        ),
        member_2: Optional[nextcord.Member] = nextcord.SlashOption(
            name="–≤—Ç–æ—Ä–æ–π",
            description="–≤—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —à–∏–ø–∞",
            required=False,
        ),
    ):

        if not isinstance(member_2, nextcord.Member):
            if member_1 != interaction.user:
                embed = nextcord.Embed(
                    title=f"{interaction.user.display_name} —Å–æ–≤–º–µ—Å—Ç–∏–º —Å {member_1.display_name} –Ω–∞ {randint(0, 100)}%.",
                    timestamp=datetime.now(),
                )
                mention = f"{interaction.user.mention}+{member_1.mention}"
            else:
                embed = nextcord.Embed(
                    title=f"{interaction.user.display_name}, –≤—ã –æ—Ç–ª–∏—á–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å —Å–æ–±–æ–π. –õ—é–±–∏—Ç–µ —Å–µ–±—è :)",
                    timestamp=datetime.now(),
                )
                mention = f"{interaction.user.mention}"
        else:
            if member_1 != member_2:
                embed = nextcord.Embed(
                    title=f"{member_1.display_name} —Å–æ–≤–º–µ—Å—Ç–∏–º —Å {member_2.display_name} –Ω–∞ {randint(0, 100)}%.",
                    timestamp=datetime.now(),
                )
                mention = f"{member_1.mention}+{member_2.mention}"
            else:
                embed = nextcord.Embed(
                    title=f"{member_1.display_name} –æ—Ç–ª–∏—á–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å —Å–æ–±–æ–π",
                    timestamp=datetime.now(),
                )
                mention = f"{member_1.mention}"

        return await interaction.send(mention, embed=embed)

    @MilkCog.slash_command(
        description="–®—É—Ç–æ—á–Ω–æ–µ —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    )
    async def exposure(
        self,
        interaction: nextcord.Interaction,
        user: Optional[nextcord.Member] = nextcord.SlashOption(
            name="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            description="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è",
            required=False,
        ),
    ):
        if not isinstance(user, nextcord.Member):
            user: nextcord.Member = interaction.user

        message = await interaction.send(
            f"*–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã, –∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –Ω–µ–ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–µ.*\n{user.mention} –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞"
        )

        faker = Faker("ru-RU")

        emb = nextcord.Embed(
            title=f"–†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *__{user.display_name}__*",
            timestamp=datetime.now(),
        )

        if randint(0, 1):
            emb.add_field(name="–§–ò–û", value=faker.name_male(), inline=True)
        else:
            emb.add_field(name="–§–ò–û", value=faker.name_female(), inline=True)

        emb.add_field(name="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", value=faker.date_of_birth(), inline=True)
        emb.add_field(name="–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", value=faker.address(), inline=False)
        emb.add_field(name="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è", value=faker.job(), inline=False)
        await message.edit(embed=emb)

    @MilkCog.message_command(
        name="–æ–±–Ω—è—Ç—å", brief="–û–±–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", aliases=["cuddle", "hug"]
    )
    async def hug(self, ctx: Context):

        embed = nextcord.Embed(
            description=f"{ctx.author.display_name} –æ–±–Ω–∏–º–∞–µ—Ç ",
            timestamp=datetime.now(),
        )

        if not ctx.message.mentions:
            embed.description += f"—Å–∞–º —Å–µ–±—è."
        else:
            embed.description += ", ".join(
                member.display_name for member in ctx.message.mentions
            )

        custom_gif = self.bot.database.get_hug_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            embed.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/hug/gif"
            )
            embed.set_image(url=r.json()["link"])

        await ctx.send(embed=embed)

    @MilkCog.message_command(name="—É–ª—ã–±–Ω—É—Ç—å—Å—è", brief="–£–ª—ã–±–Ω—É—Ç—å—Å—è", aliases=["smile"])
    async def smile(self, ctx: Context):

        emb = nextcord.Embed(
            description=f"{ctx.author.display_name} —É–ª—ã–±–∞–µ—Ç—Å—è.",
            timestamp=datetime.now(),
        )

        custom_gif = self.bot.database.get_smile_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            emb.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/smile/gif"
            )
            emb.set_image(url=r.json()["link"])
        await ctx.send(embed=emb)

    @MilkCog.message_command(name="—Ç—ã–∫", brief="–¢—ã–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", aliases=["poke"])
    async def poke(self, ctx: Context):

        embed = nextcord.Embed(
            description=f"{ctx.author.display_name} —Ç—ã–∫–∞–µ—Ç ",
            timestamp=datetime.now(),
        )

        if not ctx.message.mentions:
            embed.description += "—Å–∞–º —Å–µ–±—è."
        else:
            embed.description += ", ".join(
                member.display_name for member in ctx.message.mentions
            )

        custom_gif = self.bot.database.get_poke_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            embed.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/poke/gif"
            )
            embed.set_image(url=r.json()["link"])
        await ctx.send(embed=embed)

    @MilkCog.message_command(
        name="–ø–æ—â—ë—á–∏–Ω–∞", brief="–î–∞—Ç—å –ø–æ—â—ë—á–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", aliases=["slap"]
    )
    async def slap(self, ctx: Context):
        embed = nextcord.Embed(
            description=f"{ctx.author.display_name} –¥–∞—ë—Ç –ø–æ—â—ë—á–∏–Ω—É ",
            timestamp=datetime.now(),
        )

        if not ctx.message.mentions:
            embed.description += f"—Å–∞–º–æ–º—É —Å–µ–±–µ."
        else:
            embed.description += ", ".join(
                member.display_name for member in ctx.message.mentions
            )

        custom_gif = self.bot.database.get_slap_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            embed.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/slap/gif"
            )
            embed.set_image(url=r.json()["link"])

        await ctx.send(embed=embed)

    @MilkCog.message_command(
        name="—É–¥–∞—Ä–∏—Ç—å", brief="–£–¥–∞—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", aliases=["bite"]
    )
    async def bite(self, ctx: Context):

        embed = nextcord.Embed(
            description=f"{ctx.author.display_name} —É–¥–∞—Ä—è–µ—Ç ",
            timestamp=datetime.now(),
        )

        if not ctx.message.mentions:
            embed.description += f"—Å–∞–º —Å–µ–±—è."
        else:
            embed.description += ", ".join(
                member.display_name for member in ctx.message.mentions
            )

        custom_gif = self.bot.database.get_bite_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            embed.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/bite/gif"
            )
            embed.set_image(url=r.json()["link"])

        await ctx.send(embed=embed)

    @MilkCog.message_command(name="–∑–∞–ø–ª–∞–∫–∞—Ç—å", brief="–ó–∞–ø–ª–∞–∫–∞—Ç—å", aliases=["cry"])
    async def cry(self, ctx: Context):

        emb = nextcord.Embed(
            description=f"{ctx.author.display_name} –ø–ª–∞—á–µ—Ç.", timestamp=datetime.now()
        )

        custom_gif = self.bot.database.get_cry_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            emb.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/cry/gif"
            )
            emb.set_image(url=r.json()["link"])
        await ctx.send(embed=emb)

    @MilkCog.message_command(name="–ø–æ–∫—Ä–∞—Å–Ω–µ—Ç—å", brief="–ü–æ–∫—Ä–∞—Å–Ω–µ—Ç—å", aliases=["blush"])
    async def blush(self, ctx):

        emb = nextcord.Embed(
            description=f"{ctx.author.display_name} –∫—Ä–∞—Å–Ω–µ–µ—Ç.", timestamp=datetime.now()
        )

        custom_gif = self.bot.database.get_blush_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            emb.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/blush/gif"
            )
            emb.set_image(url=r.json()["link"])
        await ctx.send(embed=emb)

    @MilkCog.message_command(
        name="–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å", brief="–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", aliases=["kiss"]
    )
    async def kiss(self, ctx: Context):

        embed = nextcord.Embed(
            description=f"{ctx.author.display_name} —Ü–µ–ª—É–µ—Ç ",
            timestamp=datetime.now(),
        )

        if not ctx.message.mentions:
            embed.description += f"—Å–∞–º —Å–µ–±—è."
        else:
            embed.description += ", ".join(
                member.display_name for member in ctx.message.mentions
            )

        custom_gif = self.bot.database.get_kiss_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            embed.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/kiss/gif"
            )
            embed.set_image(url=r.json()["link"])

        await ctx.send(embed=embed)

    @MilkCog.message_command(
        name="–ª–∏–∑–Ω—É—Ç—å", brief="–õ–∏–∑–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", aliases=["lick"]
    )
    async def lick(self, ctx: Context):
        embed = nextcord.Embed(
            description=f"{ctx.author.display_name} –æ–±–ª–∏–∑—ã–≤–∞–µ—Ç ",
            timestamp=datetime.now(),
        )

        if not ctx.message.mentions:
            embed.description += f"—Å–∞–º —Å–µ–±—è."
        else:
            embed.description += ", ".join(
                member.display_name for member in ctx.message.mentions
            )

        custom_gif = self.bot.database.get_lick_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            embed.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/lick/gif"
            )
            embed.set_image(url=r.json()["link"])

        await ctx.send(embed=embed)

    @MilkCog.message_command(
        name="–ø–æ–≥–ª–∞–¥–∏—Ç—å", brief="–ü–æ–≥–ª–∞–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", aliases=["pat"]
    )
    async def pat(self, ctx: Context):

        embed = nextcord.Embed(
            description=f"{ctx.author.display_name} –≥–ª–∞–¥–∏—Ç ",
            timestamp=datetime.now(),
        )

        if not ctx.message.mentions:
            embed.description += f"—Å–∞–º —Å–µ–±—è."
        else:
            embed.description += ", ".join(
                member.display_name for member in ctx.message.mentions
            )

        custom_gif = self.bot.database.get_pat_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            embed.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/pat/gif"
            )
            embed.set_image(url=r.json()["link"])
        await ctx.send(embed=embed)

    @MilkCog.message_command(
        name="–ø–æ–∫–æ—Ä–º–∏—Ç—å", brief="–ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", aliases=["feed"]
    )
    async def feed(self, ctx: Context):
        embed = nextcord.Embed(timestamp=datetime.now())

        if not ctx.message.mentions:
            embed.description = f"{ctx.author.display_name} –∫—É—à–∞–µ—Ç."
        else:
            embed.description = f"{ctx.author.display_name} –∫–æ—Ä–º–∏—Ç " + ", ".join(
                member.display_name for member in ctx.message.mentions
            )

        custom_gif = self.bot.database.get_feed_gif(ctx.guild.id)
        if custom_gif is not None and randint(0, 1):
            embed.set_image(url=custom_gif)
        else:
            r: requests.Response = requests.get(
                "https://purrbot.site/api/img/sfw/feed/gif"
            )
            embed.set_image(url=r.json()["link"])

        await ctx.send(embed=embed)


def setup(bot):
    bot.add_cog(RP(bot))
